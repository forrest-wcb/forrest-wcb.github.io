<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>透视变换</title>
      <link href="/2025/01/04/%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2/"/>
      <url>/2025/01/04/%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>智能车传统组常使用“逆透视”的手段获取赛道俯视图，群友将这一思路移植到地平线组，在借鉴学习之后，记录于此。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>透视变换（Perspective Transformation）</strong> 是一种常见的几何变换，用于处理图像中因视角变化产生的透视效果。基于射影几何，利用<strong>单应性矩阵（Homography Matrix，两个平面间的映射关系）</strong>，通过坐标的线性变换实现从一种透视视角到另一种视角的转换。</p><h1 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h1><p>透视变换使用$3\times3$的单应性矩阵$H$</p><script type="math/tex; mode=display">H=\begin{bmatrix}h_{11} & h_{12} & h_{13} \\h_{21} & h_{22} & h_{23} \\h_{31} & h_{32} & h_{33}\end{bmatrix}</script><script type="math/tex; mode=display">\begin{bmatrix}x^{\prime} \\y^{\prime} \\w^{\prime}\end{bmatrix}=H\begin{bmatrix}x \\y \\1\end{bmatrix}</script><p>变换后需要通过归一化操作$x’ = \frac{x’}{w’}, y^{\prime} = \frac{y^{\prime}}{w^{\prime}}$得到实际坐标。</p><h2 id="齐次坐标表示二维点"><a href="#齐次坐标表示二维点" class="headerlink" title="齐次坐标表示二维点"></a>齐次坐标表示二维点</h2><p>二维欧几里得空间中，一个点表示为$[X,Y]^T$，在齐次坐标中表示为$[x,y,w]^T$，$w$为比例因子，实际坐标为</p><script type="math/tex; mode=display">\begin{cases}X=\frac{x}{w}\\Y=\frac{y}{w}\end{cases}</script><p>$w=1$时即为常规的二维坐标，透视变换前一般默认$w=1$，变换后需归一化保持一致性。</p><p><strong>为什么要引入齐次坐标？</strong></p><p>齐次坐标就是用N+1维向量表示N维坐标，即用齐次坐标系表示笛卡尔坐标系。引入齐次坐标旨在将各种几何变换都统一成矩阵相乘的形式，比如在二维坐标系中，平移变换只能用矩阵相加的形式表示。</p><h2 id="单应性矩阵求解"><a href="#单应性矩阵求解" class="headerlink" title="单应性矩阵求解"></a>单应性矩阵求解</h2><p>由于齐次坐标的比例不变性，即$kH$~$H$，$k\ne0$，故矩阵只有8个自由度，仅需四对变换前后的坐标即可求解单应性矩阵。往往令$h_{33}=1$，求得唯一解。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="选点"><a href="#选点" class="headerlink" title="选点"></a>选点</h2><p>需要得到四对或以上点的变换前后坐标</p><h2 id="求解单应性矩阵"><a href="#求解单应性矩阵" class="headerlink" title="求解单应性矩阵"></a>求解单应性矩阵</h2><p>通过OpenCV提供的函数进行求解，cv2.getPerspectiveTransform由<strong>精确</strong>的四对点返回单应性矩阵，cv2.findHomography从四对以上的点中多次取样，通过优化算法筛得最优解，有一定的误差容忍。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 源点坐标 (四边形)</span></span><br><span class="line">src_points = np.array([[<span class="number">100</span>, <span class="number">100</span>], [<span class="number">200</span>, <span class="number">100</span>], [<span class="number">200</span>, <span class="number">200</span>], [<span class="number">100</span>, <span class="number">200</span>]], dtype=np.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标点坐标 (矩形)</span></span><br><span class="line">dst_points = np.array([[<span class="number">50</span>, <span class="number">50</span>], [<span class="number">300</span>, <span class="number">50</span>], [<span class="number">300</span>, <span class="number">300</span>], [<span class="number">50</span>, <span class="number">300</span>]], dtype=np.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算单应性矩阵</span></span><br><span class="line">H, status = cv2.findHomography(src_points, dst_points)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;单应性矩阵 H:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(H)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="进行透视变换"><a href="#进行透视变换" class="headerlink" title="进行透视变换"></a>进行透视变换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目标图像的尺寸 (宽, 高)</span></span><br><span class="line">output_size = (<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 透视变换</span></span><br><span class="line">warped_image = cv2.warpPerspective(image, M, output_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示结果</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Warped Image&#x27;</span>, warped_image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="逆透视变换"><a href="#逆透视变换" class="headerlink" title="逆透视变换"></a>逆透视变换</h2><p>如果想通过俯视图的坐标得到原图像对应坐标，对单应性矩阵求逆，进行变换即可。</p><hr><p>透视变换中的具体应用思路可借鉴(<a href="https://hibanaw.com/archives/171/">https://hibanaw.com/archives/171/</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>已刷小说的整理回顾</title>
      <link href="/2024/02/01/%E5%B7%B2%E5%88%B7%E5%B0%8F%E8%AF%B4%E6%95%B4%E7%90%86/"/>
      <url>/2024/02/01/%E5%B7%B2%E5%88%B7%E5%B0%8F%E8%AF%B4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e3e4f9246f9f7347a8cf55ef8b5e4bde8330a29d1da176c7b1b92c36183f3896">4630436162ade97ba2718b7d0c4b3b63a5fc818b2cfd7b089ce989a5d42cab98faaee81d592492c79e01d4450850166cd4e2afcab8a245abdd43dff54a502606d055f0d83beddb087abfc95ee366cf9aa57c98db0f1c8de622c0aa98af16b2373d90df390cf959a6541f7e7513e96e6d5769fd6e1fe4b40e249e98a5f26842ace3fc14468fa12d8b2ba5032bf87520a99777b590fd50311ac5058f1444a3e1b1e6333907b07d2a88e6fee0fdb51a73c4e2b2cf04fbe4bb6a6a7f4e062c11eb5e612414c82058e055c83fc00f65e31f3b9493c10ebc50d84a517021d499f0014c25e9026b760f47f05a8b03d91984c415fa5e15f6a9f78603c2a11dc8f9dfd7dd9f06f932044bbc2355eb1949dd4744132119b73f64dbc82a6b6e1e38f82f378d35170971b1d5950a00fe542063057021d1b61dd08462ce591e8fb0503f6068abfbe7f92e622a0bb8b03152e72d82da417924f51bed707725a31832774ba092e37733e1f9de137ad3da40049842fd958fd7c8b4abb67ae4b32c95e9d8bbf4914d533fab5089c9b1aabebbb74494b3512c9a85b9094ff0c77a2dfa43adbdde2c40086da93429fb91cd688924252f0aef30fd2bfb5d12e8114ae3d843469e4ab76bd8aa1b73acf7c4fd0aa89855c882d426e6d26724bcfbf871e88b0b758895168c8e0e1df9653a8f8e129f951ed08577c2872c1e4d70d977a04f3ad7f0d768c5df357a3e0e56aa5d27009a97da96d3945f32a4d89d5565f6cc366b8fbbe043da9d64eaf6fff206eec5d376b7a9ad6bd4a3b729d22ae547fb9552abe53bb97d772bb14e4d6e9cc9b3c86e8c2352c944b13f39c96177498c38f2b691d4ba6284f8cba327accd81dddf87ed1327a616c3d126cf6c0553dd3d3e7550ae01a4dc702d4e3269bf974e62cc21f6b356f6b1aaa83887d9aca023e63e6e6a1b86da7b108d18261b7dae04147da9b8a5e6137fedc2ab8f4257008c52a625baee0dccbc4767d16e6c31760f7ae20121a996b55e35ecd9cf39b410cd4a4f2bd00cd41ac352a8ae7643c77f6a5a6e369856d3e10d0819958d250088431f0b1f125f5f23fa547eea72a77bcf6aef2fb32ca11d788d5a3f997dcf7a24ae1f82c3528f091721b5003aa2d7f7d19ceb929a88f1c81d362839010903ddb6939bf3b9d8cb08e6858660fd93fa59559fbc492e73277ba8e21befeb355e789ec857b7e5c34195ff105dc7ba7da7d903211d462f210179cb8a188b132282ce975317fb3e6cb278b70d2bda760f5e76cf2b50e0e38022632f404490667159ea2a2c0d73bb76d1270c23f02dba45ad6790af01b4fca533b33a0a4e583e3cf942342c1e35fd8ba0bded08809058bc7ec34e3f75eedc19098817b90896352b7c772b43ff10227d6e201cdaca24c59bf887fa4131b4152d97feaea23dba1c188f70a96f7b87bd6c6db5d41d23f3fc551d2319eb6c17ea52382dddf9d28c0c2da176368341ff4e1575dd621d0aa1f27c6538f65a1306f07a9add2b6830f7ab85b4bf889160bfcb54ced7f0a6defddff9770847eb40b5b2c5c6539586c9715a6497130131baa8150f1b91ee2cf1129bbdd47fb646792c2fd000f78d7e6062a0c9f89ccb016788574984926d5fa5671f9d88d80f422c2072fed4cb312d8a13b8a1d2d52897013c51873c0753e268d01535684c2a55002a4eea13f5d23f07ad38cf83c451d0b948e5ee4afae3a4ea98f7f1a9ed58a2a8416cb957eaac7844c9b3c3dde9210f5a389fb63885332f747f7dba020cfd5c663d57d6dd76dc61be7552b3591e7dfa8e6bfffe7e115f96a687d75d24fa213da78d1b0167ef116ad32784f79b276dafbac8d3b3d7235f0dc2f72a2a6e735e6b4c0023522db383d046e66679b864f7ebe2f8e8b848d668b5cf6889a87f4d5ba47c33c78935f416845477991a287cabcd42ee6752b5ab5609cfa1adf6a70d0e7e8ff26abda8d3ed37f8a36fb8d45453b26d77485e290bb07782aaf90486d127bd4e4f009240598836051aa0af62fed2cc8ed7ddcf7d6b9d120c30d1db00237a00a186c65dfd2ed5b2c09686d680ef942442c612fbe7c904072021583ad62fe20b62e2b4e926d79b771ae94c0d7464390c9a0faa031df143025c5e9e706da0de14657103ec2f2ee9804fd3f19ac0f6014e2b6dc6580cfea0e2fd215450d3a94f88f9644e155dca460ea013d3ec9227a257150443332dff25ea42b38bf64f57d97a49a1417c0272c591f2baf4b0966301df8818dbd9eebe17cdd6509bdd7720e0c9855fddb2d321e948030db56d98c3fd3f861bd6c7a619d3bc775dd7b425a43e6f1e8becbdf9db29ecc8c90e28418aff89937d01cf10e108afc5439afcd9462c7d8d554ccbc4df46455f7b3ee1e2e4637ff7e4bf98586b0a853445feef6d3511c50392bff7aeabef32237d5eb87be686d8dc719828bd9916685606f7bcde0290981c7939fb23819a930fd54691cafc29da6a35381b04e4ac32bea755a2f46ecee13fe6ce50cc6986ddafc36072fc417fac75674d8b77ab0afaabb196544c803d361cec7f9e69ad84ed7e05cb348f37166f72287be02648d66c8068ecce2dcd65e705e7b3824f8884d39bff8467e597714ca3f687525954bac76ed5df3b40b70cdaa470ef7b3df8c22a6d77fcd091d06f14c3e64abcfd3ac981431047707585d17f5a3657d67e9151b52f7617c381f338e5c9950af7a7697a4b011fe699b270ce5784d848d7c82d1c3607b691d5e52272a82ab6f0cbae66a5ca1ed4a4601955b906c3f31c1f939e9b713e955d2c92e3207412b2a35d2548e0cbf227060e2ecb708cebda212f3b9221b821688659c7002f8f0204ce48c185ad314bcb892f069396332276bae4bc7bfbb08da939f8f288ceb1572dae0cf718cd6f01251ed7558450979241168629e0f7bb2e2bd048f0eae77c8197fa9640c7c945dcf5699c68555bbbe171fb12c20ab75c938a0c8e44c93d188a62bfe47463fe269c6db21fadd9297f5a5404fd07ce1b2a49a2c04d9de154c3b501750a0536c46be50699adc386fbd35531a5fb939c53fdbcfe4989cc5e186e713636366fcdce4de01a32d9a225faae58bc107e4c0123c3863cf0eba4873413177a28f984934cab24666f06d21761d6ab5ef624e2411f1cf111f3d83dbbec31dfcea3aa0b20df384fde270b5a9eee64713a9aa1d29cee7d7185ccf4752d5ee34cffb9c4a0dbdb2da81e777421e1949f1be94680c4e7733fa1af5e2922547fb91dbaa360b9f83f422b4118ab746a7e42362b11c0b539bd4b35130a13884bdd7252228751da5d7d6bfd43240752494dfc9dc2633ff961118406dac167b2c919f695a58371eda761322e267cf05796530cbda7f9b26758425bb24b1b4b696e8c5d5d8217a9c7f06559cbc395de89214d4fe212f408b4103c29435305334affa288d3d97108f6922ded9c4f22e7e97eb16504792bc7b913cc572fabe803cd65006bc2382376a0004d26218256bee98b9076a9b0d6f6877c072d2f5e1ccf79226a914f5d462a0e06b2e339d23bafebada8b224820ed0f4012d02ce53c17f2295f11df49a761fb71c3ba9a074a7081ec5ca344f53987f568a003b8448d9bb80da0b588f490ee84a36f9613b1a7edbed4874b5fdaaca05ff337db62e8ef2965182ab5f463026bd5b4126a8769997397cfd22dd2cff137e7ee15929563319853b9cf3acd50f420e9570ad7fdeb13c093de6bc21b7ca77bfe50ec021fdbedc8af4a8b2a59cd9b9af67c28b0bed105524929489b837bc16d4bca81dee13749f3e065cf7c6adb24e79a732e9843fd278a086586463ba45211bc7c0fead2bcfaeef9a202c6407dac9fa1e550dd7ce06c82cd88133b59daf4f8d58edf126eff7bfd5820cd7d1d62cf0862d130c6ee08cc09848f44fefa09a4e37572e42ad32965bb3287a994ccba89ab258b17d1476f00a0f1a135a21ba2c7748585fdc22674673cb586c71bb460c51096962df74385454c92edfd71678e0ecbff986cee5977f78d18b04bdd16b745ec72e26d353f73e4e9abd52d83cc352a0d5a79569491c8908455ca0c34ff87c2170f82da856b3f88067aa565b809b216b36a4c4afa4d7ee07625698b376092907a2605e95bcda34cf39edddde4f0150c593e66ccfcd3214a442c214c2e86cd058664515ba34eff5d8cafb1722b3d1a2faeaaf17ee9e6b008f119e814e0ba3f776a7a5b4566f0df66f42ff4456e03c275479b0a03ae83e5e06c7538523e8dfa540f8cbf343b58de9b90630f593db42cb0160a9b8c7885199d0b093719271f8cd73951c848976716b53bd47e227d29011f2cc0c0f92ca85e730c32f6af639c8ecc93bbba7b90b6d6aa9976240b26c93cb67d690445ba1897d25940cccfed8eb97280f3ab505a937ceb0e391ec5e1478404a546ce9bb0e18d119747b235a401215404bcbe724090dccd69f43120dc96bfb2e3d41f8fffdac90021475d6ddb1348b2b219267a62e1d798644e8e3650451925284d6bf33ae4e6e9ae324b8e5580ae089490a9a4060a750e38b15bd5f9531600377a6a7ec7c3fb21d928adb86b46222f733a4e535839d876b12e4381abd6e173257e88891d5ac64dcffe3164bf006c6c92125f0c15b1fb9562a09e6af33ac879d97f946e09dced839c1375a84332911e1064480250371c7e071f51eac11175d58ffd31b9609b32e2182a7107a5ae799a3a8bb8c5e04b53813dc0be5e931d28f363989a45116e5f64484fef1ff5a4e9a35821c9cfc78646014cf8b9e6b856c0a7a8ccff9fc92f154e05fd5b85101d5a835c609341693c2cc404c9a998977a52d1ea6c5bef770600f5d08afdaf962f8ca0bd5182333a686111ae663ba0c28c68bcfa08352aa3ccb2b0f5e0ab2f0e8b50575aef26352e003214bb50bb405022ae1bdb2d49098a291c310ade04099920b4d6f70ac86c4392f202207a06fcc68667bfcbdc2c2c248c20f13934a824574dfcd3c87a75deebf4615c6f0718325a7c6702a66ca256f4586ec2f491db6b07cee057831d378d4a336df7c9209df3b83c1afa1b8d71ac335ef2c2c32d0b8fc004723ad3b3a80e69b13e7693e86cf63ac4366eda71ce73784c1a64bf2e243a2745d64cd1bce76ac022187f260dcd4d579cd30888908ff951631908f52da36c9cba00f18f8771f50abec48033319b1997b798312e419c98b21afc8952de6cc1679efb5e6c9abc89acc03a32172f5ebee9c6dc8e3f867d70c04b299d05783cba902f5077c31b8f309a4559311c48a4b5cf8eee850ae5cd4fc2a8a083b27c3bd615afb97b39ecbe5f65579757bd7752c173a594a4164db0674cfa802e2f3c1f483ef926600763933cbbf3c6aa900cb7217030bbebf4a308a0adc2309b1693d6668b1225ad8c12b0c6936ccd95d68a56e068e560115e701547450713bb6a5a0d37959e4be6a7fb8514236ad40c48d76dbf20898e6fad13f5eef30c3a22dc2c0e95ce9ac19fcf363423022b0c191de9dd73693e31b83ee957ad496414123b824bd2e17fb5a01b0285e52311a784b350bb3881710962365c34acc5eda926500b0869fa21d9981d5cc85d8c1907e77c160b1624689441fc32b4db2f167eaa48eb6464eac449cfc5b874de488285937a3428d8ed72c889a58382778177394d62450b1396370d4d361e629cb261005cfa67f580f8c20f79ef6464c22599d6b847fbaa97ea8f5c87445ed403e4730e885df3c3304b33b29df1cbd23d8b584ff16b2d7ac31bc3c94008fc35b29de7225ccc175443c9099db844ce98e4790284f256abe3c99c06cad57631fe205ec87a07e08bd8f18bc81d681a5a6a1882b49a78d7fd3fc53770b980a0423c7e530fa937c8d6057bb5bb37d9402e46ace0b9c35a2dd926b653e2744ac8b1c74039700359630c1c51090918a9190c32dc7424ef803bcfdccf5ad213c7003518288b7d7ded2c00fd930feb4c848853a51a1bc06cce4a7371765d7a3197aeadd8f549d5050658832ce41cbdda2fd37e2125118039a2b0bc19458f0e1dc957f116ddf1e55a8fa65b7183a347b8412064354843d4fe47eb590f81115be6aebdcf6eb8ae322e2401c510bc614adb8097649b968b6d1412d647895f5e188eccb6c14c32a107723567449424ead34466c104579ac8d351e46fdf46adb73d9f845629676465ade37e6c3c227963c082f77680d72caa6b9b65eccfcbf04c72757ce4ee989a3f672fc87c7d0424ad22e1177f4f6312885174c59b688df8c81a4e129066d925468fc4341028a1d802b88c1215592b6195d451d644342b911a9ac430be132d3a48eb3cf624d26d041c117db94572b7c82eea42d4eaa1644d7a5a50e12da78a7983b8413698da7eaa32624eace3291d517e83300a76ef2166c3441246f44503a158d0c21153b95280c16ba9bb334c4d94efffaccf29901cbbf476c5bd28edeac66aa260d769f74c7247a524504f928efc68b47177ca8a890aeb7e839351ab92e8d091f89423e5c3c3e87c79f3271745c8d6814398efcefb9d39c7d7e217903611e05524b80c932f32b135cd97c3cb62a6f45ecf46da964dc2c9ff0d21278f270558fca3acd368d9d20b94ac55590bae378ccfc0b3d9c464321d8edd028f18e54c1d76c750412aff867a5ea3f1ff07a38a07c5fa3d9e4d0a5df3b476a1dc22245aaacb52b041ea425eb44b3093a84a066be86307c717f34beaa26dbc4b5f2a39addd8a30521f9b99c689b13f914114daa1c5162571949fabf70fd18f17d063da3819d1626b41e8e11849fa4d8f3a36780a092a6403c53da2fd3c82f9b2be119203cd8dabd8cbd23b3584ff1453da15086a5d92332e75da7aec974502f28386216c519c14394a252b7d7ce9ac4e3ba33fb12dbe61c653a33f4bc6efe35cb0eb4bba0bc3b8e08918d80d27529c902b206a3a89ed816299b9dcd9ef6f1260639a6fca893256b6d43d932e7331c78414d4a7a6193091b0f79883b6e1e946c6784791705cae4fa567697687b6044f2ff00a6cd29802db923dafca35a3c8441103a8296f85b334498629eb26eb035f38be4b702979a42f22b15146bfa2667bbe8341d5e2cd84912dc9275ff18285b939be7a86b8fd0457cd23107b455c35633d24b30cf612031b4ab5da1988828ba62ecdcdf1e6361b4fcb37025d6f95a1497ca92626b74d514683cf11b1cbfceac220bda7a2f4abd17498fc1bdd24d5819dbed1973b476da5c3c4c447d49ed82dca131e3be7c8957a2ef91fe47c8de37df4ba630a5638847264f3a71cff542431e0bae508dc508cbb2c68ce7434f0fcf240092cb3e098ceea8c4c7e441bd3cae53561e990fa79fedb59570c4ebe88cc4d9d0fa050873e1f458bc6dab3a7082d2c5d614ea5d62aa1ca92b1c797e5723c26b40e332875bc2eb59b043f0fa3e2944f4eec356e7a1a70967a8a9a3d676ffe4381839affc9b1b2f290e04950dbc1a33236042dd643bb14016d9a5b3e0c852045db0cba3fc65d92def685841003b10fdae9f589477374edcb79e51368cbe234b77124192bd0896c3c9f5f91f754bfff218a54448160832a4a50f789a3995ac34785f058eb2bf2a1cc1bda30490152518beca42a8d175f6ab32a621266bdcb5d0395cfd4af8225563fb84c4dd03352accb8adcbe8405c7457aaa3387ce6433e114e1682430b8eb559df73b3aee053d04e75fc63bc34be52b12de709979179166057bfcb251d60b6346cb3b28c0f647f9bb80a97462fb0e98d1916d66b8ab7761fe4217b03a2a8024b50cc13a2abbec0af64ab67e4a56dcadc84b460a7c0025fbe04816abb3aebad22ebfc526307bc816550a31b29deff84f3f731972c72b676ccabc7e9121793ac0da1137226a92bf75930bdbd14c27fd0fe3913954fa1cf5a5f183df4e82e2a8c4972f41d7b83ef7f6b79a7e5fc35a955b55eda85d613e8e2e3eed39a392c8909f774713c804655d7675aa5772c22120369b37c9a31535ea13eb0f57c83b2f550359b3a8d575e8a4cf5a8853b9712347998e2d13c6d608390ef30f7b1b5dbfc60c17d9bd01979bfd5b0c52e6482dd85004d0d73a2eb12ada462213e1b2f345f15bf95707d5ef11a6608d0d82230c698cae5189c2ad12e152c0b11932b9c2002c7416186579f4cef372bea41de3115d0f3c4a6136aa713f07d5e6e1f01ae8f6f8ffff39eb77967794223a9116db9d9f9d7783cb4939f1f9f0fe55236063868f90bf08d72181ac2aeed608e59043cd83f090c13b3f29904d9493502167f9e9811d122ff7b1a0170c394fd58d9212afefaac6cea74d8096e1eade6a5eb2540447726d558f0a18775f04d06b013d1d54307636d0e3319e656525920ed1475bc9f309017c4659cc2e53d3c67d1bbc0f74590c209f391d460f1b5bc7c25aea2672fcbd6b204da5b1e4575a76e4192625335251bf9ece2b29b47ce15415a1a16c5e5aab4bc74a2bac664d7faa57445be35cd2c41f4471dc22dfbc9ffa67da423b87c23189f28bf2090ddfeb7fd1186819168ac80767f31a3db963a8e99032f5b9dd02f9f3b35931563978faecfd918f06946335b7e0af54651d564aa4184f1a18ef46a91392571a484fabf18faa8a59ea5d68f966cec395f70f7d39cced7bbebbceac27ba18619212253e301c633a693d83dbb62dabe356726e56e0942d95d4dc1a61ff00357e24f31d6f04ad5aa1e37ce9439fbbaaf499e7da57b18ed48e9961754e38407b60eb177a9028a25ce5471769cdbdda55d94f022f5243f8922722c9cc1cb20fc318d77d27595d3bee9a9dcbd4de3036a7aaa60ddcf60fa140158bb2bee896559f81f59f1416d0885abecf2d653a967f4a5fe342827e6f3051d973245eaccc40706ed4039040233c86b822524e497a724452fb1dc8eeaf60a0b36f92750ac6e825cf609f526b06b6841fa52cff67d0a06e6db3bdadea19dd5b4f9eb22f9b81a03c3afd76049f14c197d59fb1a56bf3e660bc0957c9a6cd4ac778c8c9e9d197263b0bd8bb0cb6be35a00e72823401dd913fd664706767ab71aaf48d8d12512ec87b54d2ae6bd2a8212a44343890f6d4a01c2d8bacdc70da5cee381d82d210eed1591e0a3de3fdc57ee0da212e85c93e2328224401e4f04ce9d227073e36455bda60b440dba68523869e132cb0702bd880c4ad130b78c04eee2f48a75b8a8f6d94d4d1553377c3c23f60bd09ebf08e040027c7b8287b1ed8c91c09b6c7c80faaa21b7b3f60db5993784309cb9ef2f60ff59f288d821b240d9725f7028e8fb00f4fceca6a1f67b6d712468b6e15bd987dbf9a685dbcb1a525310a69c608c0d8c1a07c936bd88bef3ed43044ba06cfdea3eefeeade2f77c319db59d224fb27359c424e9cc193772a374b04b62675c6bc6c18733a5e95d45ca9dccd8c320ca1feb8a9521f2dd3b9b382c7decd517ceb8b5baa4a7b1c58990e0f2d5b29850053571a4c8c7f1d7e3bd89718ce57b92597e8b6fffdbce4ffd571660ab98f85988d6b7cbf4e038f9224b5722e045bf54e4ebfb62310108e7e7d8639a2bacf7abc33e874e888382af1b62ffc7fe403aa64aeb7a36d1bd43ce</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Diary</title>
      <link href="/2024/01/20/Diary/"/>
      <url>/2024/01/20/Diary/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="074755efd0f7227eaef0db7b7890e677972aa4beb21ac04666bf3529561c58f0">4630436162ade97ba2718b7d0c4b3b63cb3a3f659c5ca08b4bca0f5845928186ff35dfd419923e4fb60f99538877a8a1d6b9fc4a230f000c30ddb8b50d8f3a31cdd61d43072fa6c217e2c27b55dc314361f195666419bf2d82ff4a83d2d7b17b603226e7f3d5c03f3fd8555d479956acb4ed373469332c7d3e0e9d8bcd464fc2c92633ca0297854bc0ed8bbb122a5e5093454721071143f3e793ddc942d7311c95099aa736466d3337f79a74ec1a43bb1a259db9f659f5b447eb6f79905084b5538590ef2cd86d5a7a7aa010ad0e88a814da22c665ca656a281b85483285de479886c71c4d0fefd738217be4ecfab369308299901b5d8dfb4c9910e589fd63adc2188114ed1856036d71dad4836b61233756ab13c1658fa85346fc3db69bb449e6139d7eab01b4fb8b2c49be9b2636b17a20436d362ce88bdfb8519e4823368f1c7387e2ae6974974cc0aa2c18bfa06810eac3df3747eb1c058f9f66c758092808648ec3403b8a9aa90870a8531da3c48c3368aba7c911789025482aca58cbe72574da01f157d98ffdd4704da02ad4621f030990db8eb560a217af5cfb3ac1e9e939159fcb201b5a1a833c5645c9ab241499ab7d6891202364af213b3d5185f93074af235baacb1d71c4d98e886c2ceeb13acc912f0137f165827f4a8416ad9506de18a3eecc43941a6815b112a65660728e86c6c2e3561230074e6a82f9e512c495bf0e150e3dc904bd638786833c60cc3fea8f8bdb9017a5d8dccf4db807f1f81c2fa8b7a45277fa2278c8ab1e584431c298bad3ca4c11196083270b47385139122bd4128f18c55c9bcd208db2f46e6818915ef5db1d022f0f0a37963a34396f5bf1c0ed9de2d10d288a79a177338a33104b7257292611dd678884df4d8337e030a12e442d96ebfbf31120b1c6fd25cf07612ddf3620bc1fec708cfa4addd500356474cf969a8ce31622d82dab330df4ecc52f4bdf1dcca74b8670e1cd7fc4a1cea34f165ba3b77723761341b3427c7c70ebf4f0a7f1d653939e4372749c9552b39c66507b6aedfa98e83d87feb45d9542594e727f1d8e1a5795647a5f40214cd86320c7e27c5708835d93e4ac3a77e244c9bdcaed4c3472adb4b8d0398beeca24a5808d653133335ef24154dcd2fc888f8b212c20f0394ccbf6a829796896f6e6f8f30a44f7e3304f3f2cdb3c1c6cab4713678c531c979cf6325d464d5278f649deff952389c1906e3f16558127dde64a3592e61445cd6645a6ca7ce09c6de93a4778bbac76bb9ffb97050074c0dc244c6ad87f2e561897353e06e519c3a894ba2b880b334e3a982a7568556bbc93cccc4a0066ee0b0b3a40706073dd3b3460e4b5ecc7e06780451bfcf36ad1a0353faee36ea387ad204119484f1403e8bee7ed6c964d2424b2d49f92c8766a3b3a8b4b6a42c96611ae22f6c69faddd429ec262b44e452f7d658e3fd22d675bb127526fc27d6250794c7909ef868af11bab1e5f2a7de88a87829e4447b66921279b7734e204f3b95590c1d6f0225e7ac6f51aab101be5f061215bc0e99d30b4947f75b56fb4f7654153a04f66ab1486883242c7c6a5776eba49b78b4747be7b3c3e5d910592adbdda6f6a3226761002ab149a09bc05be094c10d4a946f7212f9a5ded2b0f6bfe44d31f4b4a9fca6ad2f6d293a2d9d0c3091dcaf9d21ca0ffba97a00c3498be82ec0f6a3de6f2ba7dcc0a1ee15cb36cc7031c04d0f38d479544d3ef738e46c6d104e511cba19a7d8844463a1c25930b0156c375e9ea64d90de0621173d3b674f6a43c96a9211dcf660ec7b70e638502f5a7ba7ce5db195fd808ce71a62f6bbda9c5baf3038d3ad9279df5b3c010ca6cc433737e0f0be8deb6eb3544cb60a41d316ca80e3b84e3f07c07cbfbd7b6bb9fc4fb405f27e5916e3e4e75acf97e56345159422ebe528221c92039b93c17a415a9b11c926a7b2bf5aaa2f1d2371f195901e72ed6bd18b1cc1d81791a744ce65cc470492cc7db9458b65b69902d8eb80fdaab20d678bf901f3a81bfa0f5382cd3c914f146a9e0624089a2c715e67462cf018f7c2fb0dd0b517f67f375a9da5370e8f6f81b05d3ef03373a9b977a43d5ce55280a14b790cf4875bf2b6f77670574ba26079f196e13a5535c936bb016bdfd3d29c199d2d20d69509f936627899e9a54df61cf265e397ef7bc12b4342fd07b98b58d5780327aeba6b25d1dfc8dd08bd77d64259051f8b2c10b9bf0c16f77cdfa8f8b2f48d047ef55d7fd56ff12328a676e3ba3f295c07c565180ac6b5a362abd7d91e9d5d9233644d0fdcf0bca616ce8e1102a6612652c48f1497871b1217f3ac39d40febe68ce711db58f54c9893023e36078f97555710267e7368b8ccc5aacfbf4afec2e66e3fa082fd2fac803801f6f9826bcee074859f19829cf391e4c8a20c8f8be56132e6146bc23192eb176fb8b34e1383e2f12c108b0de92a18af4fac47b796006bbcd95fcbd67502d5ac0bd88766e36d4f9fb7867e33b1a615a8d8654e6ac5a655914d0e1580e59c68c50ef1a6a990d1b689b30338db2944f734b613deae259faeb1d8a7a4d33ebc28253ccf1bc2e0016290fa85d0a7a489cf5f5e624597324a5080f4ac2923f214aa6ccf7db33bc11f3d69cb1c2d6acd0d55cb3e4bee74e344f806e5d1e1c60d29eed0238c1c660ec586a91288c2f973472ccdff94849e0d4320ebf64c0bda23fb001707e41a44c153a9ab6134b6f77f073f7684a993f43e8f9c4ef32345932af8fa7f3d61b804abfd54768e44df6641cc2ae99f54d3224d7deca1b43fd79b4779455eb7bd059d9e2679c3e5aa1d78aca3e661813c58d2eaf5cd57024b99ffa656ce4dae7ef4836738e96d52a9b203494ab2e5b6a03e9b0eadbb2c0d5487cc79eacc0a08afe638bbb52aecf92c67c72aa3bb90003e8c38b45f9a84597ae3b5a5a815200e18eb8559844152903c4722b871a3ba09382f666a3c329a2fadfca7e0660b6d3c617f6168134e10fb9306f4ba38706736ce775d848c589236b4d2ba55f412e9c95ac8f1dd3ced747f3055e7627fc89f256b1d0dbfeb29a07ba6368f20fe274b7eb944a73547fd9534806b7a02fa283d7bb1ed1ba13a9336a89cad46e869cada0a4659eedb8da00e887c24177930b57cc4ab1dfeabbbc0725c1a1e94f57fa6f4e50af42dfc82ff2517bd49761d37174c5031dee8ce8e41aaddaa71e12616c6b10a73e4164096da75b6035f5603e19f18cebab064e46cb58a1dc7f4f2c0f17e8f5d4ba18b93d01c8e2e4cdb2485049550ed60052c455d44e1e86dd887798185de6689b863dfcd76705eda6b2b5af4e6a8f8bc2d693477a91d602b76ecc70c30d9847862831c33c82397d9b0ff889d0b71771c000cde30ba75fa9fcc70f652a9477a002a0e948b7545bb5115e70d7a740df032242a38b394a92b40d2f9140e8ab9e088d7ed43475b65239f8f2c5554cf3d2aa2403382007e702e6bd45dd5f10a7827a5339f27e0a5feaa0af38206a04012ca60ff9be7a83df742c360599b85f1f7f38b6cbaec872cdf47f17546b86ec2a20fa5dfc27d6bc68db32ffad9dbbd54555ebce18b8623309f0fad196c44a826c159fe5c30cc721cb6b99edf66abf82848e6050ce8cf4592782d9d4514cebaf5be9f2e0b33eff31fd080854a007a5cbdc7b9f230a490d3bec40c8db7f2b77bd55b1cf5f043c6e8e89f6a24c167d7465f75541f1ad552d33dc7a9967b278281696ec0cab0023a171a8c9377f947f07813268f51b629d54cb7c605fb87e8240a736693f34d9f6c1dffcb47dcee84c6d9e9e6ae774c067678ff2154314d4656d7ebfc35c5cead8e086e07d4f370a32e04949791ea8893185d0ee53be6d0afa101ee092b7f7a45d434c8964a4b1908521a49e7c93dcb3f7bfc1ae4738ff0a85415bc448eac7e08a072a8c7ee50f6f81277e38fc17941c36086aed7d9fab24f99a0468e8f37ccbb6461c3a09544e5172540321b3f6fe0fa24bde7bd745e05ff54df85c1aefbf06160d5447f32a44551da374dd033027f389245bc9d02f5ec422040da60ac747acd17f9240d1b910ccc60e06e6e186d5c5728c39a892c3e23b77b8f8cfa4653e84b23ccd9510f191ea04ce19de35240ac394f94005ee3a076e688963e66eafc78e6899f97ad3b1fd89aa41634761a246dbf73f27b48fa78250ec8041a1d7bc864d2ff586bc461303e0e12770dc31f9bac8a8df7d9e995a0cb4fdc75b59f3de228b203be6d9ecbc7d0787aeba900dcb0532ec07a2c5f69b1f4a6b090512910dbad29af5a67d587b03cefe7db4090b685db5e5aaa910b56bfb6d2eac9fb01030400805bb88da08b9b0e66cefe4b890e08c0bc8e7175afd07c396b123c7e68ea89b1a0af070c49f24f7d7f3b773be8aff148b109741470308dec6a750f1a88edc911b3bfe99737c6303ea0fe2913f2e6d16d29d60c8828813c27366b0abe831955cfca189d7a7e7373fd1a86ffa274d2e0210bd4f0496c4a4d23053d3b2552a31f1044c9f5b4e050dff44a7fc24008e7d44d372eb2169496174edd535a8cdc705b3777137343193aca144e872b9fad2dd27030e4f18170e63e52b7f6271260a194d8f9f1e38e4bafc2f65588426c2955bf91ebeb5feed2c7a77fcfa3aed11550ccafd274ffd8aaac188a5ea11c1f7c35db056aa1af87c90356d68d281c7a91977b45dd930a7bc2f21b730f7b9ba4ca1260c86299620d135d714b8482dfc08b886af1d318dd3780852629bf3ddb37a91c3e94a8d55b477c9d0a0c9b17f00803f34d170988d35a844c0c84e26eb1d676ba38df36be38a7ccbafc6c31faabe76648de90dd2e4d62b087725780ac58a31ac1b036a7250761e91668936576431d99a301ca5d7853bbab3354ffcc7e7a7c0057f442f198c034892585265169d9ec94bf165c4966204ead48d288480945788698e61aa7020c8d6222fe7957f993069557d89e2f718bbf404eea1e67aa177dee3f25c6fc760114aecb3dac1980856202a2dc2b83d3366da35f82c26ac045ddf0ed0879870c2bcc6cb5696e9fa9f66fe6aee8bfb69f2e93794dfad178667d84b2ca85a0a1b1c0b95e22612bf845b547d5355fc78d715729eb54448324e278c369123acdb53e380fecbded435421a9f483d842a29914469a245b1a22abaf1e1e54253f7b770062bc8b5b48e472f455a361688d0b1587a564d490837786318501a0ac66c72839f51304bb383f6a019397103b40254f6791a7d913bedb8fa51b819f892627ba1a2f8c6374b349d2bffa8b0acda8d15231ffee210b5e3434fc3690e4e3d699426fd545f65543809cd42d77b3539b3f2d864f74669b8a6e34f50a9f18501ba81ade24662081329d5a556d784a106aab4b53de17cc5e9d65ea74e07231d9cb594cfb657d8879c86d924904addf2575cfc000e37dc8c28d45c5d2f5787331ee8fae6043578cf40792aa808d3a1a71b6c96a43e6f40bc30e3db840906bd6e54e66f1ff9d02dc932b5208cf5aeb605297f4152f2f88ea9f9685dbed86a7a492f32274ce6886bc1f5f55f1ced2e6e4f0fd0e5d2b38899751adad38752e206537a8b54548ba9f51e4cda971aab03f56e3621621a3442282a7068f2fecace3a991ac38447600b4ce4dba0677a34af9fa398673b5b0d06c580cb7d6193ba70870e9a5e8527de350731fa6bc5e8770c8117a376a95fdb6819990c5254358e243ca1a62f3e9f6c9fe1e29cbaca2272a570db981ee2c946476cc215481fa7e228960dd8751a2e50ce3c8b5bcfc09d4b44ab2fb0c37f2ec370005a3aca3f4fbcc8ed7e77e722f74a25bcd2b8a4857658961063f1da62f7f517694f83956a0da2a3d8c76516189e04b656d2e3b238d9e2ed3696c484f7a05ce14d9b34bac25d57844c28ab4d4c960c93ec44d745877e81c94feebece95eb2f4d16a5fcbdf0e55cba1e3a9338923a2532ad8226e32dea27bce758676ed9d96ed51497beaa9739bdf0e56b5b5e3b79874c4ba9217ce63b08ed580e480cf7b99215406a1730fceb6c66edd5edad46da160275960c849cc1c5e7068c68b19fb65932befe243520c3271f538e722eaf090826a5ed1587ea5e701d63e0a3000b002cdaeb18713e3ec06be99cf18b0894b0f66976f0f255f223b08d1a85f41f33771fcea6440ca17ae634825ee7c96d4264d92895fd249b00c8f6587f4fb857088a7a338f18440b103659f163b9d8dd7e9f945af97e5807c94a08f82e6b4269ad450bb58062036c31945407307e49fcb263886b8f4b7ae1e0459e5c06b6509214c7e33b39bdc79b775170c9b5b110bff4f9fc421579d641853f315610075b555826f7416fb6cee0a89966a554e10f9d18be134a3eff1a4516407a566884aae5e015f41d142ac3db0fc2a95d69149c0f28488f6821ede03ca56567e5a60b4deb600c8bfc19ab5f1b02434315d348eeadc8ea910af042f219b6f2fe728da6bf8c14dc31cfd353f168bac766f2b6a37b230a435f80483718f4e1e504cdf03317d3cf45f80887ea7073dbff27f1bbdcd62297eca50d582200d79b0fd3efc41fc4adb781ff91cd847ebc9afb5459c02698b16f9d3b8b72d4971f61af3d3aaac16f2d33c107d468383ae63027df00836222d93f6ab0d1dde1d01977bbd9004a990bc1869e074a6f5afb515e0873d267c389299302b3ad43df2d3622cb35f91a09791ac37657df8dc11379ce7ed799a4d67af7271ca483155e3ab82cbe3f5c92f9050584aa41bad4d17321c2186521309cdcae34f457927ad348bc39977ab6f7569ea352c5c1a027ea3e8aa5da5b71ae9bc3ecbe85a9cc1b373900fc1886c83a65ad2a6a8aab93c0d1b14e635bedbc44ecfae469f21f91dabbd431e244bf72adbb93669a3716f589bff157ad4b3dca91942a1ddeb4e95e22f845c3c79b21ebbe4501ac121515029222bd7f6ca99569838ce02643dd3bb67b345bcb8e10f1514e2e56e2306caaf150cb091313f9416d9af89c3a8e6bb3cef4d644ee0115e8dbfc35a8064339fb77f46884b175b287c1c2bfff4e84869ca73b1afa94913de9e1d2669b686bce156bb2b194c89a2573bd46f06eb016572ad4545b257a6edbdca99378157bc6932813afa6667905170a27b6756ba9b1c80742fdd87078f894b28ebadd76fc6328d1ecb2d3320bb3894e3e75a03dcce7ff5bbce55e935b9c4a485589a71788b18549fed7fb320342ea45fcb3f989d4d7b830da180070f025671d736c372de760927cb375212199622ec19a190ca1279b0f7aa311ff3852ec0e3aab45784a53c1df765a7c6f893f6fbb39bbc040589b328130c8392b882807317a2cbafdb5df01ab00a899e22b645445811fc7d6125f30196ebc4296a8132ff5a85d5edf1cd0fa3af30b149f3363e80b9b603b69e2fbf91b7b85cebf7876fd64eb1427d7b18cb5a1addf276d80e5d694d2cdda1e28ce20b38641eb93df9423d74b1005bd0ae98cca2333e11dd8fc50bd159b588e92519c89a10adeba81f8fe4f7a5c0acfa5f736884314abf0114124ceb4da2fcca7bd2e5d78eb484f0a54911c13f756974b5cc4148660536ade8b801f726cd84d3072214ef89cc9527e990267ac9a208565a8f916e7ad71c7abc17033d30b6657b46bc7871b6943d93f9b1a5c49fc11d29beff66bdf370b3213035026e9fc0769045670ae53fd6f7d315cee229ff2fa38f606ed5b3d42f4b0040cdb43379ccaf1405b5e3633b5f5974284ce7ecd6285004f6bb55931fb7b6490ea0795667a198c45de580f4b0382757ac6d0a2c75a6270355d42ec860bfbfe230172f9877061460687566c67f9f5db2b2d94e13b6ab34e86a4f90ea05ac87bf15a32be32cd2067bf8d50036d1cdc44ebaa64b8df6895616ed1be0d92c2c9685e9cccde9579a67af96b314b8ce3d848373cd262bc1cc8fe0439992f2509edd86c8d0b3bd0208a2fc31182ccd0a47b5b52b683f574c8b00c1ad44b60297e4c993baddb0c47d09de792ca19fa4017d39aed7172f743abb10d613824eab9d1b0532f15bb5594d6a56b38bcd7c45bea9bf59b19c0760625ff6f84934cc94fa4c8854f9424708aca0a1aa23ec45e7146dcf3f6c4c373f322481749477b4b366794dd02ac5f767deef425a1141ef6f0864211c80f1139cd79cb7a99e4ce3b104ecfc9d9a480377ee09ff07454aac2b76fe80776fa62dfab0e4b8140b0cee732b16ef211c46d81eedad1e90e8e8ae85533c154eed6a9c435d435304f54b29ae6a5881a5ea6f46b3a34600dcdf5fd5b655a69f5fd700c0ed44040582b07c9385c5273811411ad98e8dccf4d2d98c0d951b7bb1bfcd2215835b44e5c08db32dc58c0c3ed31aa07e0cd770cff7c4730092131024f5db24c167e0ac262585232cc56d3023a9a630c1fac6d3b6e617c330686c591c1a105c0a9cf46daa8d1e6fe828f244ea9344a782acf8e4195dd269f7eb2f7c245b5994ad2801ae6e20a13a22d081d7b283d87c490ae777870ced8dd84d00b1165ca076deed8e2bac9527a9103896b4c2f659c4ef103482d05ce5f2ee1c8938a01b237ba2cc6b3aa3a0703c9333fdedefe3edb77ce266e6ba7c5e575ad57b90ec1443063f20062e469c945bac194297af1ff010e1f0f50ba9f4fe7dc04eb512cc8be22ac7fc24d90befe9fc942a55ab68671f4c710217af87eb367401a02a526e4d6fc3ea85343c7a7e4ceb755c28701d97ddab94940b820cbbb948532b14e734d8614ad96543dceed35b4b4ff23082d64ee8a896cc57f96ae91c87124b283a35f5f4fcbc595dc21d8cfaedbc6a7d67b6d7732689394b6066473373e9bc51199ecf1baacfc7f36afa55615ebab7b87cfae9a3e4575704f953c8294bcdf5661e17424fc01172219f240784e80ae7a61794fde663fc1704f4380f4f10a058888b0f0018963b7971e9fdd71655daff181aaba2f50e6a4d15eae91cbdf3a2e2790f569226b320b0350f05c1f7129c4710cfa5e0b9f11c925ab43fffae0a9f0661fa6a74ccdb01b63d5294abbd21a317a45fc5550ff250df5a4ed1b9c8e6dcb3763ccb6076c39b75ab6e3e1a334c613d9965f725479edafc455795ca4ec53af433394200e67260ea451a4912a8142f05de215c7fc0c5bc7ae9f92d028d112ae7b9245e9a6b77d2a01658d628b8a594ccb32c9b8297075872e9aa0ee085e68f241a772543482f766c668289d1f25b31acd7a12e37649140f9cbf7c8004cb2a638b98af51086efe7f329feeb4d418c7bcd172733076af8e70169d00454a71a31ff33ab149fc7e75a8e6e62d0646df1f467117e9f25d50563e9adbd70c2e2711c5a519e93593f981e9306fad6ed10bf14f985817de64f56a6349d99a6cc2bd358ef6e4e477fd4cd3e45ec8f96e720449450a4b03886c9dec9f2e134ab091868cfbd9fd07dbc1477a273d4f47b40839fd84de989223ae20a4d73b2c4c3e7353c3c218cb6c4306b11da783720f76ea81173c1b6726312e8c01dbd187c86855c1f9bc961d2e0ba74844c790f02db6b47632176c63b8e5246546f723a5d791da6fc813d2557b4eafbde9a06b1809e89eb4bf801cb4010f4258a7666754cc1e92af7013b35dadbbb622b0599dfb546f0d230e99ebb0413dc48a068ec5b66167329926101e402885bd984707d785f18351008599ab74ff628ba1b56a931db31382779aa2f3bab75fddd47a67f914d744e42451c921954c911b97d93814ed981fbed41a2d110420a5fbee7d3aaca9112119c13ecc420422be7c26a2cf4e26be0442e543b5c95329df7871caeed04aec0edf9e7228feda8d916aaab1c3d71e2de3f871c7d28f32aeb4c1bad2ef035ed86bee3bff38cf28768a7317a176ff603c63584ca24f27d69e83fe652cf3ffacdcbe5f37b4ca52b1a167fbbf5096184dff2b51bd815df07b7e88cdc6c6b3a47efa45c76868ba29f8893eba3ec32f0b2de4acb3fc903b83212b497bcf3cd3252458f73c5711cb33e19e81f4cde6fe778f603cbbb37f3c80f4bb04bcc3bfeacabd4d38e0bc09664530b4bc2a0d4a1bce46a5bf03994d99405093387f2f1c8cfcf48bdf6dab6ead36d7bbd32987ba0ef813f11a94b98a4f2dfff0b8e099a4ca6a181f4f1c927db3ccab53da7d1d8abe75e874cf38a55ddfba5ccf7736178fec2f87d47dc385cbf6baf64557864a86f5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记&amp;随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA学习笔记</title>
      <link href="/2023/12/29/cuda/"/>
      <url>/2023/12/29/cuda/</url>
      
        <content type="html"><![CDATA[<h1 id="CUDA-C-C-编程的学习"><a href="#CUDA-C-C-编程的学习" class="headerlink" title="CUDA C/C++编程的学习"></a>CUDA C/C++编程的学习</h1><p><strong>本文基于英伟达提供的线上自主学习课程</strong></p><p>加速计算正在取代 CPU 计算，成为最佳计算做法。加速计算带来的层出不穷的突破性进展、对加速应用程序日益增长的需求、轻松编写加速计算的编程规范以及支持加速计算的硬件的不断改进，所有这一切都在推动计算方式必然会过渡到加速计算。</p><h2 id="为GPU编写应用程序代码"><a href="#为GPU编写应用程序代码" class="headerlink" title="为GPU编写应用程序代码"></a>为GPU编写应用程序代码</h2><p>以下是一个 <code>.cu</code> 文件（<code>.cu</code> 是 CUDA 加速程序的文件扩展名）。其中包含两个函数，第一个函数将在 CPU 上运行，第二个将在 GPU 上运行。请抽点时间找出这两个函数在定义方式和调用方式上的差异。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CPUFunction</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This function is defined to run on the CPU.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__global__ <span class="type">void</span> <span class="title function_">GPUFunction</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This function is defined to run on the GPU.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  CPUFunction();</span><br><span class="line"></span><br><span class="line">  GPUFunction&lt;&lt;&lt;<span class="number">1</span>, <span class="number">1</span>&gt;&gt;&gt;();</span><br><span class="line">  cudaDeviceSynchronize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是一些需要特别注意的重要代码行，以及加速计算中使用的一些其他常用术语：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__global__ void GPUFunction()</span><br></pre></td></tr></table></figure><ul><li><code>__global__</code> 关键字表明以下函数将在 GPU 上运行并可<strong>全局</strong>调用，而在此种情况下，则指由 CPU 或 GPU 调用。</li><li>通常，我们将在 CPU 上执行的代码称为<strong>主机</strong>代码，而将在 GPU 上运行的代码称为<strong>设备</strong>代码。</li><li>注意返回类型为 <code>void</code>。使用 <code>__global__</code> 关键字定义的函数需要返回 <code>void</code> 类型。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GPUFunction&lt;&lt;&lt;1, 1&gt;&gt;&gt;();</span><br></pre></td></tr></table></figure><ul><li>通常，当调用要在 GPU 上运行的函数时，我们将此种函数称为<strong>已启动</strong>的<strong>核函数</strong>。</li><li>启动核函数时，我们必须提供<strong>执行配置</strong>，即在向核函数传递任何预期参数之前使用 <code>&lt;&lt;&lt; ... &gt;&gt;&gt;</code> 语法完成的配置。</li><li>在宏观层面，程序员可通过执行配置为核函数启动指定<strong>线程层次结构</strong>，从而定义线程组（称为<strong>线程块</strong>）的数量，以及要在每个线程块中执行的<strong>线程</strong>数量。稍后将在本实验深入探讨执行配置，但现在请注意正在使用包含 <code>1</code> 线程（第二个配置参数）的 <code>1</code> 线程块（第一个执行配置参数）启动核函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cudaDeviceSynchronize();</span><br></pre></td></tr></table></figure><ul><li>与许多 C/C++ 代码不同，核函数启动方式为<strong>异步</strong>：CPU 代码将继续执行<em>而无需等待核函数完成启动</em>。</li><li>调用 CUDA 运行时提供的函数 <code>cudaDeviceSynchronize</code> 将导致主机 (CPU) 代码暂作等待，直至设备 (GPU) 代码执行完成，才能在 CPU 上恢复执行。</li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">helloCPU</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello from the CPU.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__global__ <span class="type">void</span> <span class="title function_">helloGPU</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello from the GPU.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  helloCPU();</span><br><span class="line">    </span><br><span class="line">  helloGPU&lt;&lt;&lt;<span class="number">1</span>,<span class="number">1</span>&gt;&gt;&gt;();</span><br><span class="line"></span><br><span class="line">  cudaDeviceSynchronize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是对 nvidia所给例子<a href="http://dli-604a4aa51b37-99aaad.aws.labs.courses.nvidia.com/lab/edit/01-hello/01-hello-gpu.cu"><code>01-hello-gpu.cu</code></a> 的重构，运行结果为先后次序打印Hello from the CPU.和Hello from the GPU.</p><ul><li><p>从核函数定义中删除关键字 <code>__global__</code>。注意错误中的行号：您认为错误中的 \”configured\” 是什么意思？完成后，请替换 <code>__global__</code>。</p><p>报错a host function call cannot be configured。</p><p>未声明关键字__global__，函数不可被&lt;&lt;&lt;…&gt;&gt;&gt;配置</p></li></ul><ul><li><p>移除执行配置：您对 \”configured\” 的理解是否仍旧合理？完成后，请替换执行配置。</p><p>报错a __global__ function call must be configured。</p><p>启动核函数必须提供执行配置。</p></li></ul><ul><li><p>移除对 <code>cudaDeviceSynchronize</code> 的调用。在编译和运行代码之前，猜猜会发生什么情况，可以回顾一下核函数采取的是异步启动，且 <code>cudaDeviceSynchronize</code> 会使主机执行暂作等待，直至核函数执行完成后才会继续。完成后，请替换对 <code>cudaDeviceSynchronize</code> 的调用。</p><p>只打印Hello from the CPU. </p><p>核函数异步启动，CPU将继续执行而不会等待GPU执行完成</p></li></ul><ul><li><p>重构 <code>01-hello-gpu.cu</code>，以便 <code>Hello from the GPU</code> 在 <code>Hello from the CPU</code> <strong>之前</strong>打印。</p><p>将<code>helloGPU&lt;&lt;&lt;1,1&gt;&gt;&gt;();</code>及<code>cudaDeviceSynchronize();</code>移至helloCPU()前，main()如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">helloGPU&lt;&lt;&lt;<span class="number">1</span>,<span class="number">1</span>&gt;&gt;&gt;();</span><br><span class="line">cudaDeviceSynchronize();</span><br><span class="line">helloCPU();</span><br></pre></td></tr></table></figure><p>cudaDeviceSynchronize();必须调至helloCPU前，若只改动helloGPU打印结果顺序不会变。</p></li></ul><ul><li><p>重构 <code>01-hello-gpu.cu</code>，以便 <code>Hello from the GPU</code> 打印<strong>两次</strong>，一次是在 <code>Hello from the CPU</code> <strong>之前</strong>，另一次是在 <code>Hello from the CPU</code> <strong>之后</strong>。</p><p>重构后main函数如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">helloGPU&lt;&lt;&lt;<span class="number">1</span>,<span class="number">1</span>&gt;&gt;&gt;();</span><br><span class="line">cudaDeviceSynchronize();<span class="comment">//等待第一个Hello from the GPU</span></span><br><span class="line">helloCPU();<span class="comment">//打印Hello from the CPU</span></span><br><span class="line">helloGPU&lt;&lt;&lt;<span class="number">1</span>,<span class="number">1</span>&gt;&gt;&gt;();</span><br><span class="line">cudaDeviceSynchronize();<span class="comment">//等待第二个Hello from the GPU</span></span><br></pre></td></tr></table></figure><h3 id="编译并运行加速后的CUDA代码"><a href="#编译并运行加速后的CUDA代码" class="headerlink" title="编译并运行加速后的CUDA代码"></a>编译并运行加速后的CUDA代码</h3><p>CUDA 平台附带 <a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html"><strong>NVIDIA CUDA 编译器</strong></a> <code>nvcc</code>，可以编译 CUDA 加速应用程序，其中包含主机和设备代码。</p><p>曾使用过 <code>gcc</code> 的用户会对 <code>nvcc</code> 感到非常熟悉。例如，编译 <code>some-CUDA.cu</code> 文件就很简单：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvcc -arch=sm_70 -o out some-CUDA.cu -run</span><br></pre></td></tr></table></figure><ul><li><code>nvcc</code> 是使用 <code>nvcc</code> 编译器的命令行命令。</li><li>将 <code>some-CUDA.cu</code> 作为文件传递以进行编译。</li><li><code>o</code> 标志用于指定编译程序的输出文件。</li><li><code>arch</code> 标志表示该文件必须编译为哪个<strong>架构</strong>类型。本示例中，<code>sm_70</code> 将用于专门针对本实验运行的 Volta GPU 进行编译，但有意深究的用户可以参阅有关 <a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#options-for-steering-gpu-code-generation"><code>arch</code> 标志</a>、<a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list">虚拟架构特性</a> 和 <a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list">GPU特性</a> 的文档。</li><li>为方便起见，提供 <code>run</code> 标志将执行已成功编译的二进制文件。</li></ul></li></ul><h2 id="启动并行运行的核函数"><a href="#启动并行运行的核函数" class="headerlink" title="启动并行运行的核函数"></a>启动并行运行的核函数</h2><p>程序员可通过执行配置指定有关如何启动核函数以在多个 GPU <strong>线程</strong>中并行运行的详细信息。更准确地说，程序员可通过执行配置指定线程组（称为<strong>线程块</strong>或简称为<strong>块</strong>）数量以及其希望每个线程块所包含的线程数量。执行配置的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;线程块数, 每个线程块的线程数&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>启动核函数时，核函数代码由每个已配置的线程块中的每个线程执行</strong>。</p><p>因此，如果假设已定义一个名为 <code>someKernel</code> 的核函数，则下列情况为真：</p><ul><li><code>someKernel&lt;&lt;&lt;1, 1&gt;&gt;()</code> 配置为在具有单线程的单个线程块中运行后，将只运行一次。</li><li><code>someKernel&lt;&lt;&lt;1, 10&gt;&gt;()</code> 配置为在具有 10 线程的单个线程块中运行后，将运行 10 次。</li><li><code>someKernel&lt;&lt;&lt;10, 1&gt;&gt;()</code> 配置为在 10 个线程块（每个均具有单线程）中运行后，将运行 10 次。</li><li><code>someKernel&lt;&lt;&lt;10, 10&gt;&gt;()</code> 配置为在 10 个线程块（每个均具有 10 线程）中运行后，将运行 100 次。</li></ul><h2 id="线程和块的索引"><a href="#线程和块的索引" class="headerlink" title="线程和块的索引"></a>线程和块的索引</h2><p>每个线程在其线程块内部均会被分配一个索引，从 <code>0</code> 开始。此外，每个线程块也会被分配一个索引，并从 <code>0</code> 开始。正如线程组成线程块，线程块又会组成<strong>网格</strong>，而网格是 CUDA 线程层次结构中级别最高的实体。简言之，CUDA 核函数在由一个或多个线程块组成的网格中执行，且每个线程块中均包含相同数量的一个或多个线程。</p><ul><li>gridDim.x：网格中的线程块数</li><li>blockIdx.x：网格中线程块的索引</li><li>blockDim.x：线程块中的线程数</li><li>threadIdx.x：块中线程的索引</li></ul><p>CUDA 核函数可以访问能够识别如下两种索引的特殊变量：正在执行核函数的线程（位于线程块内）索引和线程所在的线程块（位于网格内）索引。这两种变量分别为 <code>threadIdx.x</code> 和 <code>blockIdx.x</code>。</p><h2 id="加速for循环"><a href="#加速for循环" class="headerlink" title="加速for循环"></a>加速for循环</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> N = <span class="number">2</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如要并行此循环，必须执行以下 2 个步骤：</p><ul><li>必须编写完成<strong>循环的单次迭代</strong>工作的核函数。</li><li>由于核函数与其他正在运行的核函数无关，因此执行配置必须使核函数执行正确的次数，例如循环迭代的次数。</li></ul><h3 id="练习：使用单个线程块加速for循环"><a href="#练习：使用单个线程块加速for循环" class="headerlink" title="练习：使用单个线程块加速for循环"></a>练习：使用单个线程块加速for循环</h3><p><a href="http://dli-604a4aa51b37-24abdb.aws.labs.courses.nvidia.com/lab/edit/04-loops/01-single-block-loop.cu"><code>01-single-block-loop.cu</code></a> 内的 <code>loop</code> 函数运行着一个“for 循环”并将连续打印 <code>0</code> 至 <code>9</code> 之间的所有数字。将 <code>loop</code> 函数重构为 CUDA 核函数，使其在启动后并行执行 <code>N</code> 次迭代。重构成功后，应仍能打印 <code>0</code> 至 <code>9</code> 之间的所有数字。</p><p>原代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">int</span> N)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ; i&lt;N ; i++)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This is iteration number %d\n&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> N =<span class="number">10</span>;</span><br><span class="line">  loop(N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构后：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">__global__ <span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This is iteration number %d\n&quot;</span>,threadIdx.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  loop&lt;&lt;&lt;<span class="number">1</span>,<span class="number">10</span>&gt;&gt;&gt;();</span><br><span class="line">  cudaDeviceSynchronize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：每个线程块内，thread.x的输出顺序是有序的，而不同线程块间的输出是无序的。如下，输出是无序的。但是若改为 loop&lt;&lt;<10,2>&gt;&gt;();可以发现仅线程块输出结果间是无序的，同一线程块内线程输出结果是有序的。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">__global__ <span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This is iteration number %d\n&quot;</span>,blockIdx.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  loop&lt;&lt;&lt;<span class="number">10</span>,<span class="number">1</span>&gt;&gt;&gt;();</span><br><span class="line">  cudaDeviceSynchronize();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><em>查阅了一些资料，询问了老师之后，得知严格意义上线程块和线程的输出顺序是无法控制的，“并行本身其实就不应该控制先后顺序的，如果需要控制的话，那就说明这个任务不适合做矢量化了，因为他是顺序依赖的”，这里的线程输出有序，猜测是因为显示系统进行了后处理。</em>所以在实际使用中需要考虑使用线程块加速的适用性。</p><h2 id="调整线程块的大小以实现更多的并行化"><a href="#调整线程块的大小以实现更多的并行化" class="headerlink" title="调整线程块的大小以实现更多的并行化"></a>调整线程块的大小以实现更多的并行化</h2><p>线程块包含的线程具有数量限制：确切地说是 1024 个。为增加加速应用程序中的并行量，我们必须要能在多个线程块之间进行协调。</p><p>CUDA 核函数可以访问给出块中线程数的特殊变量：<code>blockDim.x</code>。通过将此变量与 <code>blockIdx.x</code> 和 <code>threadIdx.x</code> 变量结合使用，并借助惯用表达式 <code>threadIdx.x + blockIdx.x * blockDim.x</code> 在包含多个线程的多个线程块之间组织并行执行，并行性将得以提升。以下是详细示例。</p><p>执行配置 <code>&lt;&lt;&lt;10, 10&gt;&gt;&gt;</code> 将启动共计拥有 100 个线程的网格，这些线程均包含在由 10 个线程组成的 10 个线程块中。因此，我们希望每个线程（<code>0</code> 至 <code>99</code> 之间）都能计算该线程的某个唯一索引。</p><ul><li>如果线程块 <code>blockIdx.x</code> 等于 <code>0</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>0</code>。向 <code>0</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>0</code> 至 <code>9</code>。</li><li>如果线程块 <code>blockIdx.x</code> 等于 <code>1</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>10</code>。向 <code>10</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>10</code> 至 <code>19</code>。</li></ul><h2 id="分配将要在GPU和CPU上访问的内存"><a href="#分配将要在GPU和CPU上访问的内存" class="headerlink" title="分配将要在GPU和CPU上访问的内存"></a>分配将要在GPU和CPU上访问的内存</h2><p>CUDA 的最新版本（版本 6 和更高版本）已能轻松分配可用于 CPU 主机和任意数量 GPU 设备的内存。尽管现今有许多适用于内存管理并可支持加速应用程序中最优性能的 <a href="http://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#memory-optimizations">中高级技术</a>，但我们现在要介绍的基础 CUDA 内存管理技术不但能够支持远超 CPU 应用程序的卓越性能，而且几乎不会产生任何开发人员成本。</p><p>如要分配和释放内存，并获取可在主机和设备代码中引用的指针，请使用 <code>cudaMallocManaged</code> 和 <code>cudaFree</code> 取代对 <code>malloc</code> 和 <code>free</code> 的调用，如下例所示：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有CPU</span></span><br><span class="line"><span class="type">int</span> N = <span class="number">2</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line"><span class="type">size_t</span> size = N * <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> *a;</span><br><span class="line"></span><br><span class="line">a = (<span class="type">int</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加速后</span></span><br><span class="line"><span class="type">int</span> N = <span class="number">2</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line"><span class="type">size_t</span> size = N * <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> *a;</span><br><span class="line"><span class="comment">// a的地址作为第一个参数传递</span></span><br><span class="line"><span class="built_in">cudaMallocManaged</span>(&amp;a, size);</span><br><span class="line"><span class="built_in">cudaFree</span>(a);</span><br></pre></td></tr></table></figure><h2 id="网格大小与工作量不匹配"><a href="#网格大小与工作量不匹配" class="headerlink" title="网格大小与工作量不匹配"></a>网格大小与工作量不匹配</h2><p>可能会出现这样的情况，执行配置所创建的线程数无法匹配为实现并行循环所需的线程数。</p><p>一个常见的例子与希望选择的最佳线程块大小有关。例如，鉴于 GPU 的硬件特性，所含线程的数量为 32 的倍数的线程块是最理想的选择，因其具备性能上的优势。假设我们要启动一些线程块且每个线程块中均包含 256 个线程（32 的倍数），并需运行 1000 个并行任务（此处使用极小的数量以便于说明），则任何数量的线程块均无法在网格中精确生成 1000 个总线程，因为没有任何整数值在乘以 32 后可以恰好等于 1000。</p><p>这个问题可以通过以下方式轻松地解决：</p><ul><li>编写执行配置，使其创建的线程数<strong>超过</strong>执行分配工作所需的线程数。</li><li>将一个值作为参数传递到核函数 (<code>N</code>) 中，该值表示要处理的数据集总大小或完成工作所需的总线程数。</li><li>计算网格内的线程索引后（使用 <code>threadIdx + blockIdx*blockDim</code>），请检查该索引是否超过 <code>N</code>，并且只在不超过的情况下执行与核函数相关的工作。</li></ul><p>以下是编写执行配置的惯用方法示例，适用于 <code>N</code> 和线程块中的线程数已知，但无法保证网格中的线程数和 <code>N</code> 之间完全匹配的情况。如此一来，便可确保网格中至少始终拥有 <code>N</code> 所需的线程数，且超出的线程数至多仅可相当于 1 个线程块的线程数量：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// N已知</span></span><br><span class="line"><span class="type">int</span> N = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个线程块均包含256个线程</span></span><br><span class="line"><span class="type">size_t</span> threads_per_block = <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保网格中至少始终拥有 `N` 所需的线程数，且超出的线程数至多仅可相当于 1 个线程块的线程数量</span></span><br><span class="line"><span class="type">size_t</span> number_of_blocks = (N + threads_per_block - <span class="number">1</span>) / threads_per_block;</span><br><span class="line"></span><br><span class="line">some_kernel&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;(N);</span><br></pre></td></tr></table></figure><p>由于上述执行配置致使网格中的线程数超过 <code>N</code>，因此需要注意 <code>some_kernel</code> 定义中的内容，以确保 <code>some_kernel</code> 在由其中一个 ”额外的” 线程执行时不会尝试访问超出范围的数据元素：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="title">some_kernel</span><span class="params">(<span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> idx = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (idx &lt; N) <span class="comment">// 检查线程索引是否超过N</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//条件满足时执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨网格的循环"><a href="#跨网格的循环" class="headerlink" title="跨网格的循环"></a>跨网格的循环</h2><p>或出于选择，为了要创建具有超高性能的执行配置，或出于需要，一个网格中的线程数量可能会小于数据集的大小。请思考一下包含 1000 个元素的数组和包含 250 个线程的网格（此处使用极小的规模以便于说明）。此网格中的每个线程将需使用 4 次。如要实现此操作，一种常用方法便是在核函数中使用<strong>跨网格循环</strong>。</p><p>在跨网格循环中，每个线程将在网格内使用 <code>threadIdx + blockIdx*blockDim</code> 计算自身唯一的索引，并对数组内该索引的元素执行相应运算，然后将网格中的线程数添加到索引并重复此操作，直至超出数组范围。例如，对于包含 500 个元素的数组和包含 250 个线程的网格，网格中索引为 20 的线程将执行如下操作：</p><ul><li>对包含 500 个元素的数组的元素 20 执行相应运算</li><li>将其索引增加 250，使网格的大小达到 270</li><li>对包含 500 个元素的数组的元素 270 执行相应运算</li><li>将其索引增加 250，使网格的大小达到 520</li><li>由于 520 现已超出数组范围，因此线程将停止工作</li></ul><p>CUDA 提供一个可给出网格中线程块数的特殊变量：<code>gridDim.x</code>。然后计算网格中的总线程数，即网格中的线程块数乘以每个线程块中的线程数：<code>gridDim.x * blockDim.x</code>。带着这样的想法来看看以下核函数中网格跨度循环的详细示例：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">kernel</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> indexWithinTheGrid = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">  <span class="type">int</span> gridStride = gridDim.x * blockDim.x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = indexWithinTheGrid; i &lt; N; i += gridStride)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// do work on a[i];</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ol><li>与在任何应用程序中一样，加速 CUDA 代码中的错误处理同样至关重要。即便不是大多数，也有许多 CUDA 函数（例如，<a href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY">内存管理函数</a>）会返回类型为 <code>cudaError_t</code> 的值，该值可用于检查调用函数时是否发生错误。以下是对调用 <code>cudaMallocManaged</code> 函数执行错误处理的示例：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cudaError_t err;</span><br><span class="line">err = <span class="built_in">cudaMallocManaged</span>(&amp;a, N)                    <span class="comment">// Assume the existence of `a` and `N`.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err != cudaSuccess)                           <span class="comment">// `cudaSuccess` is provided by CUDA.</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(err)); <span class="comment">// `cudaGetErrorString` is provided by CUDA.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>启动定义为返回 <code>void</code> 的核函数后，将不会返回类型为 <code>cudaError_t</code> 的值。为检查启动核函数时是否发生错误（例如，如果启动配置错误），CUDA 提供 <code>cudaGetLastError</code> 函数，该函数会返回类型为 <code>cudaError_t</code> 的值。</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This launch should cause an error, but the kernel itself</span></span><br><span class="line"><span class="comment"> * cannot return it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">someKernel&lt;&lt;&lt;<span class="number">1</span>, <span class="number">-1</span>&gt;&gt;&gt;();  <span class="comment">// -1 is not a valid number of threads.</span></span><br><span class="line"></span><br><span class="line">cudaError_t err;</span><br><span class="line">err = <span class="built_in">cudaGetLastError</span>(); <span class="comment">// `cudaGetLastError` will return the error from above.</span></span><br><span class="line"><span class="keyword">if</span> (err != cudaSuccess)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(err));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>最后，为捕捉异步错误（例如，在异步核函数执行期间），请务必检查后续同步 CUDA 运行时 API 调用所返回的状态（例如 <code>cudaDeviceSynchronize</code>）；如果之前启动的其中一个核函数失败，则将返回错误。</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cudaError_t err;</span><br><span class="line">err = cudaDeviceSynchronize();                <span class="comment">// Assume the existence of `a` and `N`.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err != cudaSuccess)                           <span class="comment">// `cudaSuccess` is provided by CUDA.</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, cudaGetErrorString(err)); <span class="comment">// `cudaGetErrorString` is provided by CUDA.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CUDA错误处理功能"><a href="#CUDA错误处理功能" class="headerlink" title="CUDA错误处理功能"></a>CUDA错误处理功能</h3><p>创建一个包装 CUDA 函数调用的宏对于检查错误十分有用。以下是一个宏示例，您可以在余下练习中随时使用：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> cudaError_t <span class="title">checkCuda</span><span class="params">(cudaError_t result)</span><span class="comment">//inline 关键字提示编译器尝试将该函数内联，这可以提高性能。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (result != cudaSuccess) &#123;<span class="comment">//这个条件检查CUDA操作的结果是否不等于 cudaSuccess。如果发生错误，则执行if块内的代码。</span></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;CUDA Runtime Error: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(result));</span><br><span class="line">    <span class="built_in">assert</span>(result == cudaSuccess);<span class="comment">//使用 assert 宏检查结果是否等于 cudaSuccess。如果不等于，这会触发一个断言失败，如果启用了断言，程序将终止。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*...*/</span></span><br><span class="line">  <span class="built_in">checkCuda</span>( <span class="built_in">cudaDeviceSynchronize</span>() )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2维和3维的网格和块"><a href="#2维和3维的网格和块" class="headerlink" title="2维和3维的网格和块"></a>2维和3维的网格和块</h2><p>可以将网格和线程块定义为最多具有 3 个维度。使用多个维度定义网格和线程块绝不会对其性能造成任何影响，但这在处理具有多个维度的数据时可能非常有用，例如 2D 矩阵。如要定义二维或三维网格或线程块，可以使用 CUDA 的 <code>dim3</code> 类型，即如下所示：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">dim3 <span class="title">threads_per_block</span><span class="params">(<span class="number">16</span>, <span class="number">16</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">dim3 <span class="title">number_of_blocks</span><span class="params">(<span class="number">16</span>, <span class="number">16</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">someKernel&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;();</span><br></pre></td></tr></table></figure><p>鉴于以上示例，<code>someKernel</code> 内部的变量 <code>gridDim.x</code>、<code>gridDim.y</code>、<code>blockDim.x</code> 和 <code>blockDim.y</code> 均将等于 <code>16</code>。</p><p>此处介绍一个万能的索引计算式</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tid = blockIdx.z * (gridDim.x * gridDim.y) * (blockDim.x * blockDim.y * blockDim.z)\ </span><br><span class="line">    <span class="comment">//块在z方向上的索引</span></span><br><span class="line">          + blockIdx.y * gridDim.x * (blockDim.x * blockDim.y * blockDim.z) \</span><br><span class="line">    <span class="comment">//块在y方向上的索引</span></span><br><span class="line">          + blockIdx.x * (blockDim.x * blockDim.y * blockDim.z) \                      </span><br><span class="line">    <span class="comment">//块在x方向上的索引</span></span><br><span class="line">        + threadIdx.z * (blockDim.x * blockDim.y) \                                 </span><br><span class="line">    <span class="comment">//线程在z方向上的索引</span></span><br><span class="line">          + threadIdx.y * blockDim.x \                                               </span><br><span class="line">    <span class="comment">//线程在y方向上的索引</span></span><br><span class="line">          + threadIdx.x;                                                            </span><br><span class="line">    <span class="comment">//线程在x方向上的索引</span></span><br></pre></td></tr></table></figure><h1 id="使用-CUDA-C-C-统一内存和-Nsight-Systems-nsys-管理加速应用程序内存"><a href="#使用-CUDA-C-C-统一内存和-Nsight-Systems-nsys-管理加速应用程序内存" class="headerlink" title="使用 CUDA C/C++ 统一内存和 Nsight Systems (nsys) 管理加速应用程序内存"></a><strong>使用 CUDA C/C++ 统一内存和 Nsight Systems (nsys) 管理加速应用程序内存</strong></h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>当您在本实验完成学习后，您将能够：</p><ul><li>使用 <strong>Nsight Systems命令行分析器</strong> (<strong>nsys</strong>) 分析被加速的应用程序的性能。</li><li>利用对<strong>流多处理器</strong>的理解优化执行配置。</li><li>理解<strong>统一内存</strong>在页错误和数据迁移方面的行为。</li><li>使用<strong>异步内存预取</strong>减少页错误和数据迁移以提高性能。</li><li>采用循环式的迭代开发加快应用程序的优化加速和部署。</li></ul><h2 id="使用nsys性能分析器帮助应用程序迭代地进行优化"><a href="#使用nsys性能分析器帮助应用程序迭代地进行优化" class="headerlink" title="使用nsys性能分析器帮助应用程序迭代地进行优化"></a>使用nsys性能分析器帮助应用程序迭代地进行优化</h2><p>如要确保优化加速代码库的尝试真正取得成功，唯一方法便是分析应用程序以获取有关其性能的定量信息。<code>nsys</code> 是指 NVIDIA 的Nsight System命令行分析器。该分析器附带于CUDA工具包中，提供分析被加速的应用程序性能的强大功能。</p><p><code>nsys</code> 使用起来十分简单，最基本用法是向其传递使用 <code>nvcc</code> 编译的可执行文件的路径。随后 <code>nsys</code> 会继续执行应用程序，并在此之后打印应用程序 GPU 活动的摘要输出、CUDA API 调用以及<strong>统一内存</strong>活动的相关信息。我们稍后会在本实验中详细介绍这一主题。</p><p>在加速应用程序或优化已经加速的应用程序时，我们应该采用科学的迭代方法。作出更改后需分析应用程序、做好记录并记录任何重构可能会对性能造成何种影响。尽早且经常进行此类观察通常会让您轻松获得足够的性能提升，以助您发布加速应用程序。此外，经常分析应用程序将使您了解到对 CUDA 代码库作出的特定更改会对其实际性能造成何种影响：而当只在代码库中进行多种更改后再分析应用程序时，将很难得知这一点。</p><p><code>nsys profile</code>将生成一个<code>qdrep</code>报告文件，该文件可以以多种方式使用。 我们在这里使用<code>--stats = true</code>标志表示我们希望打印输出摘要统计信息。 输出的信息有很多，包括：</p><ul><li>配置文件配置详细信息</li><li>报告文件的生成详细信息</li><li><strong>CUDA API统计信息</strong></li><li><strong>CUDA核函数的统计信息</strong></li><li><strong>CUDA内存操作统计信息（时间和大小）</strong></li><li>操作系统内核调用接口的统计信息</li></ul><p>值得一提的是，默认情况下，<code>nsys profile</code>不会覆盖现有的报告文件。 这样做是为了防止在进行概要分析时意外丢失工作。 如果出于某种原因，您宁愿覆盖现有的报告文件，例如在快速迭代期间，可以向<code>nsys profile</code>提供<code>-f</code>标志以允许覆盖现有的报告文件。</p><p><strong>练习</strong></p><p>优化前<a href="http://dli-604a4aa51b37-ee1ab7.aws.labs.courses.nvidia.com/lab/edit/01-vector-add/01-vector-add.cu">01-vector-add.cu</a></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initWith</span><span class="params">(<span class="type">float</span> num, <span class="type">float</span> *a, <span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    a[i] = num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Device kernel stores into `result` the sum of each</span></span><br><span class="line"><span class="comment"> * same-indexed value of `a` and `b`.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">__global__</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addVectorsInto</span><span class="params">(<span class="type">float</span> *result, <span class="type">float</span> *a, <span class="type">float</span> *b, <span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">  <span class="type">int</span> stride = blockDim.x * gridDim.x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = index; i &lt; N; i += stride)</span><br><span class="line">  &#123;</span><br><span class="line">    result[i] = a[i] + b[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Host function to confirm values in `vector`. This function</span></span><br><span class="line"><span class="comment"> * assumes all values are the same `target` value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkElementsAre</span><span class="params">(<span class="type">float</span> target, <span class="type">float</span> *vector, <span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(vector[i] != target)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;FAIL: vector[%d] - %0.0f does not equal %0.0f\n&quot;</span>, i, vector[i], target);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Success! All values calculated correctly.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> N = <span class="number">2</span>&lt;&lt;<span class="number">24</span>;</span><br><span class="line">  <span class="type">size_t</span> size = N * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">float</span> *a;</span><br><span class="line">  <span class="type">float</span> *b;</span><br><span class="line">  <span class="type">float</span> *c;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaMallocManaged</span>(&amp;a, size);</span><br><span class="line">  <span class="built_in">cudaMallocManaged</span>(&amp;b, size);</span><br><span class="line">  <span class="built_in">cudaMallocManaged</span>(&amp;c, size);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">initWith</span>(<span class="number">3</span>, a, N);</span><br><span class="line">  <span class="built_in">initWith</span>(<span class="number">4</span>, b, N);</span><br><span class="line">  <span class="built_in">initWith</span>(<span class="number">0</span>, c, N);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> threadsPerBlock;</span><br><span class="line">  <span class="type">size_t</span> numberOfBlocks;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * nsys should register performance changes when execution configuration</span></span><br><span class="line"><span class="comment">   * is updated.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  threadsPerBlock = <span class="number">1</span>;</span><br><span class="line">  numberOfBlocks = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  cudaError_t addVectorsErr;</span><br><span class="line">  cudaError_t asyncErr;</span><br><span class="line"></span><br><span class="line">  addVectorsInto&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(c, a, b, N);</span><br><span class="line"></span><br><span class="line">  addVectorsErr = <span class="built_in">cudaGetLastError</span>();</span><br><span class="line">  <span class="keyword">if</span>(addVectorsErr != cudaSuccess) <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(addVectorsErr));</span><br><span class="line"></span><br><span class="line">  asyncErr = <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line">  <span class="keyword">if</span>(asyncErr != cudaSuccess) <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(asyncErr));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">checkElementsAre</span>(<span class="number">7</span>, c, N);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaFree</span>(a);</span><br><span class="line">  <span class="built_in">cudaFree</span>(b);</span><br><span class="line">  <span class="built_in">cudaFree</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优化将77行的的threadsPerblock改为1024即可，分析可得核函数运行时间加快了一个量级，此外cudaDeviceSynchronize()运行时间也大幅缩短，易于理解。                       </p><h2 id="流多处理器（Streaming-Multiprocessors）及查询GPU的设备配置"><a href="#流多处理器（Streaming-Multiprocessors）及查询GPU的设备配置" class="headerlink" title="流多处理器（Streaming Multiprocessors）及查询GPU的设备配置"></a>流多处理器（Streaming Multiprocessors）及查询GPU的设备配置</h2><h3 id="流多处理器和Warps"><a href="#流多处理器和Warps" class="headerlink" title="流多处理器和Warps"></a>流多处理器和Warps</h3><p>运行 CUDA 应用程序的 GPU 具有称为<strong>流多处理器</strong>（或 <strong>SM</strong>）的处理单元。在核函数执行期间，将线程块提供给 SM 以供其执行。为支持 GPU 执行尽可能多的并行操作，您通常可以<em>选择线程块数量数倍于指定 GPU 上 SM 数量的网格大小</em>来提升性能。（提高SM的利用率）</p><p>此外，SM 会在一个名为<strong>warp</strong>的线程块内创建、管理、调度和执行包含 32 个线程的线程组。值得注意的是，可以<em>分配数量数倍于 32 的线程数量</em>来提升性能。</p><h3 id="以编程方式查询GPU设备属性"><a href="#以编程方式查询GPU设备属性" class="headerlink" title="以编程方式查询GPU设备属性"></a>以编程方式查询GPU设备属性</h3><p>由于 GPU 上的 SM 数量会因所用的特定 GPU 而异，因此为支持可移植性，您不得将 SM 数量硬编码到代码库中。相反，应该以编程方式获取此信息。</p><p>以下所示为在 CUDA C/C++ 中获取 C 结构的方法，该结构包含当前处于活动状态的 GPU 设备的多个属性，其中包括设备的 SM 数量：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> deviceId;</span><br><span class="line"><span class="built_in">cudaGetDevice</span>(&amp;deviceId);                  <span class="comment">// `deviceId`现在指向活动的GPU</span></span><br><span class="line"></span><br><span class="line">cudaDeviceProp props;</span><br><span class="line"><span class="built_in">cudaGetDeviceProperties</span>(&amp;props, deviceId); <span class="comment">// `props` 现在有很多有用的关于主用GPU设备的属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查询设备信息"><a href="#查询设备信息" class="headerlink" title="查询设备信息"></a>查询设备信息</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> deviceId;</span><br><span class="line">  <span class="built_in">cudaGetDevice</span>(&amp;deviceId);</span><br><span class="line"></span><br><span class="line">  cudaDeviceProp props;</span><br><span class="line">  <span class="built_in">cudaGetDeviceProperties</span>(&amp;props, deviceId);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> computeCapabilityMajor = props.major;</span><br><span class="line">  <span class="type">int</span> computeCapabilityMinor = props.minor;</span><br><span class="line">  <span class="type">int</span> multiProcessorCount = props.multiProcessorCount;</span><br><span class="line">  <span class="type">int</span> warpSize = props.warpSize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Device ID: %d\nNumber of SMs: %d\nCompute Capability Major: %d\nCompute Capability Minor: %d\nWarp Size: %d\n&quot;</span>, deviceId, multiProcessorCount, computeCapabilityMajor, computeCapabilityMinor, warpSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果样式下图</p><p><img src="https://cdn.jsdelivr.net/gh/forrest-wcb/markdown_img@main/img/202312292237862.png" alt="image-20231220165103264"></p><ul><li><strong>Compute Capability Major（计算能力主版本）：</strong> 这是主要版本号，表示GPU架构的主要特性。较新的主要版本通常支持更多的功能和性能提升。例如，Compute Capability Major 7 表示该GPU属于较新的架构。</li><li><strong>Compute Capability Minor（计算能力次版本）：</strong> 这是次要版本号，表示GPU架构的次要特性。通常，次要版本的提升表示一些较小的改进或优化。Compute Capability Minor 5 表示该GPU的次要版本。</li></ul><h3 id="将网格数调整为SM数，进一步优化矢量加法"><a href="#将网格数调整为SM数，进一步优化矢量加法" class="headerlink" title="将网格数调整为SM数，进一步优化矢量加法"></a>将网格数调整为SM数，进一步优化矢量加法</h3><p>得知设备信息后，对执行配置进行调整，对01-vector-add.cu进一步优化。</p><p>线程块调整为80，线程数调成为640，重复多次运行分析，核函数运行时间约在0.12s左右，相比优化前的2.35s，以及上文的优化结果0.145s，有了不小的进步。</p><h2 id="获得统一内存的细节"><a href="#获得统一内存的细节" class="headerlink" title="获得统一内存的细节"></a>获得统一内存的细节</h2><h3 id="统一内存-UM-的迁移"><a href="#统一内存-UM-的迁移" class="headerlink" title="统一内存(UM)的迁移"></a>统一内存(UM)的迁移</h3><p>分配 UM 时，内存尚未驻留在主机或设备上。主机或设备尝试访问内存时会发生 <a href="https://en.wikipedia.org/wiki/Page_fault">页错误</a>，此时主机或设备会批量迁移所需的数据。同理，当 CPU 或加速系统中的任何 GPU 尝试访问尚未驻留在其上的内存时，会发生页错误并触发迁移。</p><p>能够执行页错误并按需迁移内存对于在加速应用程序中简化开发流程大有助益。此外，在处理展示稀疏访问模式的数据时（例如，在应用程序实际运行之前无法得知需要处理的数据时），以及在具有多个 GPU 的加速系统中，数据可能由多个 GPU 设备访问时，按需迁移内存将会带来显著优势。</p><p>有些情况下（例如，在运行时之前需要得知数据，以及需要大量连续的内存块时），我们还能有效规避页错误和按需数据迁移所产生的开销。</p><p>本实验的后续内容将侧重于对按需迁移的理解，以及如何在分析器输出中识别按需迁移。这些知识可让您在享受按需迁移优势的同时，减少其产生的开销。</p><h3 id="练习：探索统一内存（UM）的页错误"><a href="#练习：探索统一内存（UM）的页错误" class="headerlink" title="练习：探索统一内存（UM）的页错误"></a>练习：探索统一内存（UM）的页错误</h3><p><code>nsys profile</code> 会提供描述所分析应用程序 UM 行为的输出。在本练习中，您将对一个简单的应用程序做出一些修改，并会在每次更改后利用 <code>nsys profile</code> 的统一内存输出部分，探讨 UM 数据迁移的行为方式。</p><p><a href="http://dli-604a4aa51b37-46802e.aws.labs.courses.nvidia.com/lab/edit/06-unified-memory-page-faults/01-page-faults.cu"><code>01-page-faults.cu</code></a> 包含 <code>hostFunction</code> 和 <code>gpuKernel</code> 函数，我们可以通过这两个函数并使用数字 <code>1</code> 初始化 <code>2&lt;&lt;24</code> 个单元向量的元素。主机函数和 GPU 核函数目前均未使用。</p><p>对于以下 4 个问题中的每一问题，请根据您对 UM 行为的理解，首先假设应会发生何种页错误，然后使用代码库中所提供 2 个函数中的其中一个或同时使用这两个函数编辑 <a href="http://dli-604a4aa51b37-46802e.aws.labs.courses.nvidia.com/lab/edit/06-unified-memory-page-faults/01-page-faults.cu"><code>01-page-faults.cu</code></a>以创建场景，以便您测试假设。</p><p>为了检验您的假设，请使用下面的代码执行单元来编译和分析代码。 一定要记录从<code>nsys profile --stats = true</code>输出中获得的假设以及结果。 在<code>nsys profile --stats = true</code>的输出中，您应该查找以下内容：</p><ul><li>输出中是否有 <em>CUDA内存操作统计信息</em> 部分？</li><li>如果是，这是否表示数据从主机到设备（HtoD）或从设备到主机（DtoH）的迁移？</li><li>进行迁移时，输出如何说明有多少个“操作”？ 如果看到许多小的内存迁移操作，则表明按需出现页面错误，并且每次在请求的位置出现页面错误时都会发生小内存迁移。</li></ul><p>以下是供您探索的方案，以及遇到困难时的解决方案：</p><ul><li>当仅通过CPU访问统一内存时，是否存在内存迁移和/或页面错误的证据？</li><li>当仅通过GPU访问统一内存时，是否有证据表明内存迁移和/或页面错误？</li><li>当先由CPU然后由GPU访问统一内存时，是否有证据表明存在内存迁移和/或页面错误？</li><li>当先由GPU然后由CPU访问统一内存时，是否存在内存迁移和/或页面错误的证据？ </li></ul><p><img src="https://cdn.jsdelivr.net/gh/forrest-wcb/markdown_img@main/img/202312292238197.png" alt="image-20231223181124188"></p><p>上图为<code>nsys profile --stats = true</code>输出内容中显示的数据从设备到主机的迁移DtoH，总操作数为768，可以看到有许多小内存的迁移操作，验证了按需出现页面错误，并且每次在请求的位置出现页面错误时都会发生小内存迁移。</p><p>当 <code>nsys profile</code> 给出核函数所需的执行时间时，则在此函数执行期间发生的主机到设备页错误和数据迁移都会包含在所显示的执行时间中。故可以通过减少UM页错误和数据迁移的发生缩短核函数运行时间。</p><h2 id="异步内存预取"><a href="#异步内存预取" class="headerlink" title="异步内存预取"></a>异步内存预取</h2><p>在主机到设备和设备到主机的内存传输过程中，我们使用一种技术来减少页错误和按需内存迁移成本，此强大技术称为<strong>异步内存预取</strong>。通过此技术，程序员可以在应用程序代码使用统一内存 (UM) 之前，在后台将其异步迁移至系统中的任何 CPU 或 GPU 设备。此举可以减少页错误和按需数据迁移所带来的成本，并进而提高 GPU 核函数和 CPU 函数的性能。</p><p>此外，预取往往会以更大的数据块来迁移数据，因此其迁移次数要低于按需迁移。此技术非常适用于以下情况：在运行时之前已知数据访问需求且数据访问并未采用稀疏模式。</p><p>CUDA 可通过 <code>cudaMemPrefetchAsync</code> 函数，轻松将托管内存异步预取到 GPU 设备或 CPU。以下所示为如何使用该函数将数据预取到当前处于活动状态的 GPU 设备，然后再预取到 CPU：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> deviceId;</span><br><span class="line"><span class="built_in">cudaGetDevice</span>(&amp;deviceId);                                  <span class="comment">// The ID of the currently active GPU device.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemPrefetchAsync</span>(pointerToSomeUMData, size, deviceId);<span class="comment">// 预取pointerToSomeUMData处size大小的数据至活动的GPU设备</span></span><br><span class="line"><span class="built_in">cudaMemPrefetchAsync</span>(pointerToSomeUMData, size, cudaCpuDeviceId); <span class="comment">// 预取回主机.`cudaCpuDeviceId`是可以直接使用的变量</span></span><br></pre></td></tr></table></figure><h3 id="练习：异步内存预取"><a href="#练习：异步内存预取" class="headerlink" title="练习：异步内存预取"></a>练习：异步内存预取</h3><p>在 01-vector-add.cu应用程序中使用 <code>cudaMemPrefetchAsync</code> 函数开展 实验，以探究其会对页错误和内存迁移产生何种影响。</p><p>结果：可以看到内存传输次数减少了，但是每次传输的量增加了，并且内核执行时间大大减少了。</p><h1 id="异步流及-CUDA-C-C-应用程序的可视化性能分析"><a href="#异步流及-CUDA-C-C-应用程序的可视化性能分析" class="headerlink" title="异步流及 CUDA C/C++ 应用程序的可视化性能分析"></a><strong>异步流及 CUDA C/C++ 应用程序的可视化性能分析</strong></h1><p>CUDA工具包附带了 <strong>Nsight Systems</strong>，这是一个功能强大的GUI应用程序，可支持CUDA应用程序的开发。 Nsight Systems为被加速的应用程序生成图形化的活动时间表，其中包含有关CUDA API调用、内核执行、内存活动以及<strong>CUDA流</strong>的使用的详细信息。</p><h2 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h2><p>在完成本练习后，您将能够：</p><ul><li>使用<strong>Nsight Systems</strong>直观地描述由GPU加速的CUDA应用程序的时间表。</li><li>使用<strong>Nsight Systems</strong>识别和利用CUDA应用程序中的优化机会。</li><li>利用CUDA流在被加速的应用程序中并发执行核函数。</li><li>（ <strong>可选的进阶内容</strong> ）使用手动的设备内存分配，包括分配固定的内存，以便在并发CUDA流之间异步传输数据。</li></ul><h2 id="运行Nsight-Systems"><a href="#运行Nsight-Systems" class="headerlink" title="运行Nsight Systems"></a>运行Nsight Systems</h2><p>此处使用的是英伟达配置好的远程桌面，可以直接启动和使用Nsight Systems（但是无比的卡顿），建议在本地配置，进行可视化分析。</p><p>主要对前面的各种优化进行可视化分析，故不做记录</p><h2 id="并发CUDA流"><a href="#并发CUDA流" class="headerlink" title="并发CUDA流"></a>并发CUDA流</h2><p>在 CUDA 编程中，<strong>流</strong>是由按顺序执行的一系列命令构成。在 CUDA 应用程序中，核函数的执行以及一些内存传输均在 CUDA 流中进行。不过直至此时，您仍未直接与 CUDA 流打交道；但实际上您的 CUDA 代码已在名为<em>默认流</em>的流中执行了其核函数。</p><p>除默认流以外，CUDA 程序员还可创建并使用非默认 CUDA 流，此举可支持执行多个操作，例如在不同的流中并发执行多个核函数。多流的使用可以为您的加速应用程序带来另外一个层次的并行，并能提供更多应用程序的优化机会。</p><p>以下为默认流和非默认流的关系</p><ul><li>给定流中的所有操作会按序执行。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/forrest-wcb/markdown_img@main/img/202312291746109.png" alt="image-20231229174627015" style="zoom:50%;" /></p><ul><li>就不同非默认流中的操作而言，无法保证其会按彼此之间的任何特定顺序执行。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/forrest-wcb/markdown_img@main/img/202312291747578.png" alt="image-20231229174728331" style="zoom:50%;" /></p><ul><li>默认流具有阻断能力，即，它会等待其它已在运行的所有流完成当前操作之后才运行，但在其自身运行完毕之前亦会阻碍其它流的运行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/forrest-wcb/markdown_img@main/img/202312291748572.png" alt="image-20231229174809215" style="zoom:50%;" /></p><h3 id="创建，使用和销毁非默认CUDA流"><a href="#创建，使用和销毁非默认CUDA流" class="headerlink" title="创建，使用和销毁非默认CUDA流"></a>创建，使用和销毁非默认CUDA流</h3><p>以下代码段演示了如何创建，利用和销毁非默认CUDA流。您会注意到，要在非默认CUDA流中启动CUDA核函数，必须将流作为执行配置的第4个可选参数传递给该核函数。到目前为止，您仅利用了执行配置的前两个参数：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cudaStream_t stream;   <span class="comment">// CUDA流的类型为 `cudaStream_t`</span></span><br><span class="line"><span class="built_in">cudaStreamCreate</span>(&amp;stream); <span class="comment">// 注意，必须将一个指针传递给 `cudaCreateStream`</span></span><br><span class="line"></span><br><span class="line">someKernel&lt;&lt;&lt;number_of_blocks, threads_per_block, <span class="number">0</span>, stream&gt;&gt;&gt;();   <span class="comment">// `stream` 作为第4个EC参数传递</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaStreamDestroy</span>(stream); <span class="comment">// 注意，将值（而不是指针）传递给 `cudaDestroyStream`</span></span><br></pre></td></tr></table></figure><p>但值得一提的是，执行配置的第3个可选参数超出了本实验的范围。此参数允许程序员提供<strong>共享内存</strong>中为每个内核启动动态分配的字节数。每个块分配给共享内存的默认字节数为“0”，在本练习的其余部分中，您将传递“ 0”作为该值，以便展示我们感兴趣的第4个参数。</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>源程序</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">printNumber</span><span class="params">(<span class="type">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    printNumber&lt;&lt;&lt;<span class="number">1</span>, <span class="number">1</span>&gt;&gt;&gt;(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以预见核函数的5次启动都在默认流顺次执行，可以用Nsight Systems进行可视化分析。由于核函数的所有 5 次启动均在同一个流中发生，因此看到 5 个核函数顺次执行也就不足为奇。此外，也可以这么说，由于默认流具有阻断作用，所以核函数都会在完成本次启动之后才启动下一次，而事实也是如此。</p><p>重构</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">printNumber</span><span class="params">(<span class="type">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    cudaStream_t stream;</span><br><span class="line">    <span class="built_in">cudaStreamCreate</span>(&amp;stream);</span><br><span class="line">    printNumber&lt;&lt;&lt;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, stream&gt;&gt;&gt;(i);</span><br><span class="line">    <span class="built_in">cudaStreamDestroy</span>(stream);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原程序</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">__global__</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initWith</span><span class="params">(<span class="type">float</span> num, <span class="type">float</span> *a, <span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">  <span class="type">int</span> stride = blockDim.x * gridDim.x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = index; i &lt; N; i += stride)</span><br><span class="line">  &#123;</span><br><span class="line">    a[i] = num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addVectorsInto</span><span class="params">(<span class="type">float</span> *result, <span class="type">float</span> *a, <span class="type">float</span> *b, <span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">  <span class="type">int</span> stride = blockDim.x * gridDim.x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = index; i &lt; N; i += stride)</span><br><span class="line">  &#123;</span><br><span class="line">    result[i] = a[i] + b[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkElementsAre</span><span class="params">(<span class="type">float</span> target, <span class="type">float</span> *vector, <span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(vector[i] != target)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;FAIL: vector[%d] - %0.0f does not equal %0.0f\n&quot;</span>, i, vector[i], target);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Success! All values calculated correctly.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> deviceId;</span><br><span class="line">  <span class="type">int</span> numberOfSMs;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaGetDevice</span>(&amp;deviceId);</span><br><span class="line">  <span class="built_in">cudaDeviceGetAttribute</span>(&amp;numberOfSMs, cudaDevAttrMultiProcessorCount, deviceId);</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> N = <span class="number">2</span>&lt;&lt;<span class="number">24</span>;</span><br><span class="line">  <span class="type">size_t</span> size = N * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">float</span> *a;</span><br><span class="line">  <span class="type">float</span> *b;</span><br><span class="line">  <span class="type">float</span> *c;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaMallocManaged</span>(&amp;a, size);</span><br><span class="line">  <span class="built_in">cudaMallocManaged</span>(&amp;b, size);</span><br><span class="line">  <span class="built_in">cudaMallocManaged</span>(&amp;c, size);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaMemPrefetchAsync</span>(a, size, deviceId);</span><br><span class="line">  <span class="built_in">cudaMemPrefetchAsync</span>(b, size, deviceId);</span><br><span class="line">  <span class="built_in">cudaMemPrefetchAsync</span>(c, size, deviceId);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> threadsPerBlock;</span><br><span class="line">  <span class="type">size_t</span> numberOfBlocks;</span><br><span class="line"></span><br><span class="line">  threadsPerBlock = <span class="number">256</span>;</span><br><span class="line">  numberOfBlocks = <span class="number">32</span> * numberOfSMs;</span><br><span class="line"></span><br><span class="line">  cudaError_t addVectorsErr;</span><br><span class="line">  cudaError_t asyncErr;</span><br><span class="line"></span><br><span class="line">  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(<span class="number">3</span>, a, N);</span><br><span class="line">  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(<span class="number">4</span>, b, N);</span><br><span class="line">  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(<span class="number">0</span>, c, N);</span><br><span class="line"></span><br><span class="line">  addVectorsInto&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(c, a, b, N);</span><br><span class="line"></span><br><span class="line">  addVectorsErr = <span class="built_in">cudaGetLastError</span>();</span><br><span class="line">  <span class="keyword">if</span>(addVectorsErr != cudaSuccess) <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(addVectorsErr));</span><br><span class="line"></span><br><span class="line">  asyncErr = <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line">  <span class="keyword">if</span>(asyncErr != cudaSuccess) <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(asyncErr));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaMemPrefetchAsync</span>(c, size, cudaCpuDeviceId);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">checkElementsAre</span>(<span class="number">7</span>, c, N);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaFree</span>(a);</span><br><span class="line">  <span class="built_in">cudaFree</span>(b);</span><br><span class="line">  <span class="built_in">cudaFree</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重构</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">__global__</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initWith</span><span class="params">(<span class="type">float</span> num, <span class="type">float</span> *a, <span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">  <span class="type">int</span> stride = blockDim.x * gridDim.x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = index; i &lt; N; i += stride)</span><br><span class="line">  &#123;</span><br><span class="line">    a[i] = num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addVectorsInto</span><span class="params">(<span class="type">float</span> *result, <span class="type">float</span> *a, <span class="type">float</span> *b, <span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">  <span class="type">int</span> stride = blockDim.x * gridDim.x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = index; i &lt; N; i += stride)</span><br><span class="line">  &#123;</span><br><span class="line">    result[i] = a[i] + b[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkElementsAre</span><span class="params">(<span class="type">float</span> target, <span class="type">float</span> *vector, <span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(vector[i] != target)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;FAIL: vector[%d] - %0.0f does not equal %0.0f\n&quot;</span>, i, vector[i], target);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Success! All values calculated correctly.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> deviceId;</span><br><span class="line">  <span class="type">int</span> numberOfSMs;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaGetDevice</span>(&amp;deviceId);</span><br><span class="line">  <span class="built_in">cudaDeviceGetAttribute</span>(&amp;numberOfSMs, cudaDevAttrMultiProcessorCount, deviceId);</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> N = <span class="number">2</span>&lt;&lt;<span class="number">24</span>;</span><br><span class="line">  <span class="type">size_t</span> size = N * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">float</span> *a;</span><br><span class="line">  <span class="type">float</span> *b;</span><br><span class="line">  <span class="type">float</span> *c;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaMallocManaged</span>(&amp;a, size);</span><br><span class="line">  <span class="built_in">cudaMallocManaged</span>(&amp;b, size);</span><br><span class="line">  <span class="built_in">cudaMallocManaged</span>(&amp;c, size);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaMemPrefetchAsync</span>(a, size, deviceId);</span><br><span class="line">  <span class="built_in">cudaMemPrefetchAsync</span>(b, size, deviceId);</span><br><span class="line">  <span class="built_in">cudaMemPrefetchAsync</span>(c, size, deviceId);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> threadsPerBlock;</span><br><span class="line">  <span class="type">size_t</span> numberOfBlocks;</span><br><span class="line"></span><br><span class="line">  threadsPerBlock = <span class="number">256</span>;</span><br><span class="line">  numberOfBlocks = <span class="number">32</span> * numberOfSMs;</span><br><span class="line"></span><br><span class="line">  cudaError_t addVectorsErr;</span><br><span class="line">  cudaError_t asyncErr;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Create 3 streams to run initialize the 3 data vectors in parallel.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  cudaStream_t stream1, stream2, stream3;</span><br><span class="line">  <span class="built_in">cudaStreamCreate</span>(&amp;stream1);</span><br><span class="line">  <span class="built_in">cudaStreamCreate</span>(&amp;stream2);</span><br><span class="line">  <span class="built_in">cudaStreamCreate</span>(&amp;stream3);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Give each `initWith` launch its own non-standard stream.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock, <span class="number">0</span>, stream1&gt;&gt;&gt;(<span class="number">3</span>, a, N);</span><br><span class="line">  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock, <span class="number">0</span>, stream2&gt;&gt;&gt;(<span class="number">4</span>, b, N);</span><br><span class="line">  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock, <span class="number">0</span>, stream3&gt;&gt;&gt;(<span class="number">0</span>, c, N);</span><br><span class="line"></span><br><span class="line">  addVectorsInto&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(c, a, b, N);</span><br><span class="line"></span><br><span class="line">  addVectorsErr = <span class="built_in">cudaGetLastError</span>();</span><br><span class="line">  <span class="keyword">if</span>(addVectorsErr != cudaSuccess) <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(addVectorsErr));</span><br><span class="line"></span><br><span class="line">  asyncErr = <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line">  <span class="keyword">if</span>(asyncErr != cudaSuccess) <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(asyncErr));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaMemPrefetchAsync</span>(c, size, cudaCpuDeviceId);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">checkElementsAre</span>(<span class="number">7</span>, c, N);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Destroy streams when they are no longer needed.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaStreamDestroy</span>(stream1);</span><br><span class="line">  <span class="built_in">cudaStreamDestroy</span>(stream2);</span><br><span class="line">  <span class="built_in">cudaStreamDestroy</span>(stream3);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaFree</span>(a);</span><br><span class="line">  <span class="built_in">cudaFree</span>(b);</span><br><span class="line">  <span class="built_in">cudaFree</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最终任务：加速和优化N体模拟器"><a href="#最终任务：加速和优化N体模拟器" class="headerlink" title="最终任务：加速和优化N体模拟器"></a>最终任务：加速和优化N体模拟器</h2><p><a href="https://en.wikipedia.org/wiki/N-body_problem">n-body</a> 模拟器可以预测通过引力相互作用的一组物体的个体运动。<a href="http://dli-604a4aa51b37-c4c714.aws.labs.courses.nvidia.com/lab/edit/09-nbody/01-nbody.cu">01-nbody.cu</a> 包含一个简单而有效的 n-body 模拟器，适合用于在三维空间移动的物体。我们可通过向该应用程序传递一个命令行参数以影响系统中的物体数量。</p><p>以目前的仅用CPU的情况下，此应用程序大约需要5秒钟才能运行4096个物体，需要<strong>20分钟</strong>才能运行65536个物体。您的任务是用GPU加速程序，同时保持仿真的正确性。</p><p>源程序如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;timer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;files.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOFTENING 1e-9f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Each body contains x, y, and z coordinate positions,</span></span><br><span class="line"><span class="comment"> * as well as velocities in the x, y, and z directions.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123; <span class="type">float</span> x, y, z, vx, vy, vz; &#125; Body;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the gravitational impact of all bodies in the system</span></span><br><span class="line"><span class="comment"> * on all others.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bodyForce</span><span class="params">(Body *p, <span class="type">float</span> dt, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="type">float</span> Fx = <span class="number">0.0f</span>; <span class="type">float</span> Fy = <span class="number">0.0f</span>; <span class="type">float</span> Fz = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="type">float</span> dx = p[j].x - p[i].x;</span><br><span class="line">      <span class="type">float</span> dy = p[j].y - p[i].y;</span><br><span class="line">      <span class="type">float</span> dz = p[j].z - p[i].z;</span><br><span class="line">      <span class="type">float</span> distSqr = dx*dx + dy*dy + dz*dz + SOFTENING;</span><br><span class="line">      <span class="type">float</span> invDist = <span class="built_in">rsqrtf</span>(distSqr);</span><br><span class="line">      <span class="type">float</span> invDist3 = invDist * invDist * invDist;</span><br><span class="line"></span><br><span class="line">      Fx += dx * invDist3; Fy += dy * invDist3; Fz += dz * invDist3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p[i].vx += dt*Fx; p[i].vy += dt*Fy; p[i].vz += dt*Fz;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">const</span> <span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The assessment will test against both 2&lt;11 and 2&lt;15.</span></span><br><span class="line">  <span class="comment">// Feel free to pass the command line argument 15 when you gernate ./nbody report files</span></span><br><span class="line">  <span class="type">int</span> nBodies = <span class="number">2</span>&lt;&lt;<span class="number">11</span>;</span><br><span class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) nBodies = <span class="number">2</span>&lt;&lt;<span class="built_in">atoi</span>(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The assessment will pass hidden initialized values to check for correctness.</span></span><br><span class="line">  <span class="comment">// You should not make changes to these files, or else the assessment will not work.</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> * initialized_values;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> * solution_values;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nBodies == <span class="number">2</span>&lt;&lt;<span class="number">11</span>) &#123;</span><br><span class="line">    initialized_values = <span class="string">&quot;files/initialized_4096&quot;</span>;</span><br><span class="line">    solution_values = <span class="string">&quot;files/solution_4096&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// nBodies == 2&lt;&lt;15</span></span><br><span class="line">    initialized_values = <span class="string">&quot;files/initialized_65536&quot;</span>;</span><br><span class="line">    solution_values = <span class="string">&quot;files/solution_65536&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">2</span>) initialized_values = argv[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">3</span>) solution_values = argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">float</span> dt = <span class="number">0.01f</span>; <span class="comment">// Time step</span></span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> nIters = <span class="number">10</span>;  <span class="comment">// Simulation iterations</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> bytes = nBodies * <span class="built_in">sizeof</span>(Body);</span><br><span class="line">  <span class="type">float</span> *buf;</span><br><span class="line"></span><br><span class="line">  buf = (<span class="type">float</span> *)<span class="built_in">malloc</span>(bytes);</span><br><span class="line"></span><br><span class="line">  Body *p = (Body*)buf;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">read_values_from_file</span>(initialized_values, buf, bytes);</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> totalTime = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * This simulation will run for 10 cycles of time, calculating gravitational</span></span><br><span class="line"><span class="comment">   * interaction amongst bodies, and adjusting their positions to reflect.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> iter = <span class="number">0</span>; iter &lt; nIters; iter++) &#123;</span><br><span class="line">    <span class="built_in">StartTimer</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * You will likely wish to refactor the work being done in `bodyForce`,</span></span><br><span class="line"><span class="comment">   * and potentially the work to integrate the positions.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">bodyForce</span>(p, dt, nBodies); <span class="comment">// compute interbody forces</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * This position integration cannot occur until this round of `bodyForce` has completed.</span></span><br><span class="line"><span class="comment">   * Also, the next round of `bodyForce` cannot begin until the integration is complete.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; nBodies; i++) &#123; <span class="comment">// integrate position</span></span><br><span class="line">      p[i].x += p[i].vx*dt;</span><br><span class="line">      p[i].y += p[i].vy*dt;</span><br><span class="line">      p[i].z += p[i].vz*dt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> tElapsed = <span class="built_in">GetTimer</span>() / <span class="number">1000.0</span>;</span><br><span class="line">    totalTime += tElapsed;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> avgTime = totalTime / (<span class="type">double</span>)(nIters);</span><br><span class="line">  <span class="type">float</span> billionsOfOpsPerSecond = <span class="number">1e-9</span> * nBodies * nBodies / avgTime;</span><br><span class="line">  <span class="built_in">write_values_to_file</span>(solution_values, buf, bytes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// You will likely enjoy watching this value grow as you accelerate the application,</span></span><br><span class="line">  <span class="comment">// but beware that a failure to correctly synchronize the device might result in</span></span><br><span class="line">  <span class="comment">// unrealistically high values.</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%0.3f Billion Interactions / second&quot;</span>, billionsOfOpsPerSecond);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优化热点如下：</p><ol><li>将bodyforce函数改为核函数，外层循环可以优化，内层循环具有顺序依赖故不做改动</li><li>将bodyforce函数执行后的将引力集成到各物体位置的for循环改为核函数。“该集成不仅需在 <code>bodyForce</code> 函数运行后进行，并且需在下一次调用 <code>bodyForce</code> 函数之前完成。”所以，在执行前添加cudaDeviceSynchronize()语句</li><li>执行配置根据SMs和wraps数量进行配置（此处线程数越大，核函数运行时间反而变长，取32和64的运行时间相对较优）</li></ol><p>重构结果</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;timer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;files.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOFTENING 1e-9f</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123; <span class="type">float</span> x, y, z, vx, vy, vz; &#125; Body;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">bodyForce</span><span class="params">(Body *p, <span class="type">float</span> dt, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">  <span class="type">int</span> stride = blockDim.x * gridDim.x;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; n; i += stride)&#123;</span><br><span class="line">    <span class="type">float</span> Fx = <span class="number">0.0f</span>; <span class="type">float</span> Fy = <span class="number">0.0f</span>; <span class="type">float</span> Fz = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="type">float</span> dx = p[j].x - p[i].x;</span><br><span class="line">      <span class="type">float</span> dy = p[j].y - p[i].y;</span><br><span class="line">      <span class="type">float</span> dz = p[j].z - p[i].z;</span><br><span class="line">      <span class="type">float</span> distSqr = dx*dx + dy*dy + dz*dz + SOFTENING;</span><br><span class="line">      <span class="type">float</span> invDist = <span class="built_in">rsqrtf</span>(distSqr);</span><br><span class="line">      <span class="type">float</span> invDist3 = invDist * invDist * invDist;</span><br><span class="line"></span><br><span class="line">      Fx += dx * invDist3; Fy += dy * invDist3; Fz += dz * invDist3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p[i].vx += dt*Fx; p[i].vy += dt*Fy; p[i].vz += dt*Fz;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">integrate_position</span><span class="params">(Body *p,<span class="type">float</span> dt,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;</span><br><span class="line">       <span class="type">int</span> stride = blockDim.x * gridDim.x;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; n; i += stride) &#123;</span><br><span class="line">                <span class="comment">// integrate position</span></span><br><span class="line">                p[i].x += p[i].vx*dt;</span><br><span class="line">                p[i].y += p[i].vy*dt;</span><br><span class="line">                p[i].z += p[i].vz*dt;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">const</span> <span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> deviceId;</span><br><span class="line">  <span class="type">int</span> numberOfSMs;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaGetDevice</span>(&amp;deviceId);</span><br><span class="line">  <span class="built_in">cudaDeviceGetAttribute</span>(&amp;numberOfSMs, cudaDevAttrMultiProcessorCount, deviceId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> nBodies = <span class="number">2</span>&lt;&lt;<span class="number">11</span>;</span><br><span class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) nBodies = <span class="number">2</span>&lt;&lt;<span class="built_in">atoi</span>(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> * initialized_values;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> * solution_values;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nBodies == <span class="number">2</span>&lt;&lt;<span class="number">11</span>) &#123;</span><br><span class="line">    initialized_values = <span class="string">&quot;files/initialized_4096&quot;</span>;</span><br><span class="line">    solution_values = <span class="string">&quot;files/solution_4096&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// nBodies == 2&lt;&lt;15</span></span><br><span class="line">    initialized_values = <span class="string">&quot;files/initialized_65536&quot;</span>;</span><br><span class="line">    solution_values = <span class="string">&quot;files/solution_65536&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">2</span>) initialized_values = argv[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">3</span>) solution_values = argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">float</span> dt = <span class="number">0.01f</span>; <span class="comment">// Time step</span></span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> nIters = <span class="number">10</span>;  <span class="comment">// Simulation iterations</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> bytes = nBodies * <span class="built_in">sizeof</span>(Body);</span><br><span class="line">  <span class="type">float</span> *buf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//buf = (float *)malloc(bytes);</span></span><br><span class="line">  <span class="built_in">cudaMallocManaged</span>(&amp;buf, bytes);</span><br><span class="line">  </span><br><span class="line">  Body *p = (Body*)buf;</span><br><span class="line">  <span class="comment">//cudaMemPrefetchAsync(p, bytes, deviceId);</span></span><br><span class="line">  <span class="type">size_t</span> threadsPerBlock = <span class="number">64</span>;</span><br><span class="line">  <span class="type">size_t</span> numberOfBlocks = <span class="number">32</span> * numberOfSMs;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">read_values_from_file</span>(initialized_values, buf, bytes);</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> totalTime = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> iter = <span class="number">0</span>; iter &lt; nIters; iter++) &#123;</span><br><span class="line">    <span class="built_in">StartTimer</span>();</span><br><span class="line">    <span class="comment">//cudaStream_t stream;   // CUDA流的类型为 `cudaStream_t`</span></span><br><span class="line">    <span class="comment">//cudaStreamCreate(&amp;stream); </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bodyForce&lt;&lt;&lt; numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(p, dt, nBodies); <span class="comment">// compute interbody forces</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line">    integrate_position&lt;&lt;&lt; numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(p, dt, nBodies);</span><br><span class="line">    <span class="comment">//cudaDeviceSynchronize();</span></span><br><span class="line">    <span class="comment">//cudaStreamDestroy(stream); </span></span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> tElapsed = <span class="built_in">GetTimer</span>() / <span class="number">1000.0</span>;</span><br><span class="line">    totalTime += tElapsed;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//cudaDeviceSynchronize();</span></span><br><span class="line">  <span class="type">double</span> avgTime = totalTime / (<span class="type">double</span>)(nIters);</span><br><span class="line">  <span class="type">float</span> billionsOfOpsPerSecond = <span class="number">1e-9</span> * nBodies * nBodies / avgTime;</span><br><span class="line">  <span class="built_in">write_values_to_file</span>(solution_values, buf, bytes);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%0.3f Billion Interactions / second&quot;</span>, billionsOfOpsPerSecond);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cudaFree</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后优化结果，计算4096个物体</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">您的应用程序运行了: 0.1543秒</span><br><span class="line">您的应用程序运行速度是  22.358 Billion Interactions / second</span><br></pre></td></tr></table></figure><p>计算65536个物体</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">您的应用程序运行了: 0.4912秒</span><br><span class="line">您的应用程序运行速度是  121.163 Billion Interactions / second</span><br></pre></td></tr></table></figure><p>建议结合可视化分析，也许可以得到更优的结果。（本人由于懒得部署本地Nsight Systems，且英伟达提供的远程桌面过于卡顿，故没有结合可视化分析。虽然尝试了异步内存预取和使用非默认流，但是效果并不显著，因为没法进行可视化分析，我也不清楚内存转移时间是否缩短和不同非默认流是否并行，所以使用可视化分析，可能可以进行进一步的优化）</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>姑且算是接触了cuda c编程的皮毛。缘由是上学期心头一热选的公选课，但由于要跨校区上课，所以也没去过几节课（别问，就是懒）。没退课的原因主要是想在cuda上加半个技能点，而且这是学校帮忙兑换的Nvidia线上自主培训课程，价值89刀，薅一手。</p><p>平时没学，为了完成大作业，就在这几周速通了，学习记录在这篇blog。此外由于课上运行都是在英伟达提供的远程云环境中，没有考虑到配置cuda环境的诸多麻烦。上周速成大作业的时候，跌跌撞撞地配了快一天的环境😅，如果后面有想法，打算再写篇博客记录下环境配置。</p><hr><p>——2023年倒数第三天的晚上。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cuda加速计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拾珠</title>
      <link href="/2023/09/14/poems/"/>
      <url>/2023/09/14/poems/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cc980afe92479c23407495fda35cca421c0a998907a1391ae1bb65961f61abd4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词歌赋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World！</title>
      <link href="/2023/09/04/hello%20world/"/>
      <url>/2023/09/04/hello%20world/</url>
      
        <content type="html"><![CDATA[<h1 id="建站起因"><a href="#建站起因" class="headerlink" title="建站起因"></a>建站起因</h1><p>突然发现自己已经是大三老东西了，前两年由于兴趣广泛，试了不少错，遍尝失败苦果，现在已经没有试错的资本了。之前学长说我涉猎多而不精，现在想来也是，我总是见猎心喜，打算学习某方面知识然后又浅尝辄止，且由于能力精力有限，导致了如今反省自身只能惶恐地发现竟无一项所长。未来方向之多以致惊慌迷茫失措，我也该思考未来规划了（这也许是我第一次面临这样的选择，从小到大，升学、分科、择校、转专业种种选择，我仿佛都在随波逐流，从未独立作出自己的抉择）</p><p>之前见过同学的博客，我也心血来潮跟着教程折腾了几天，搭建了个自己的博客（hexo+butterfly 确实简单易用且美观），希望以此记录我的学习轨迹，兼作督促。</p><h1 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h1><p>博客先就这样了(虽然还有不少问题没有解决和好多功能没有实现)，其实我对美观方面是比较在意的，先立个 flag，以后有时间的话一定回来继续优化。</p><p>新的学年不能再像之前那般任性且遇难则退，希望能选定一个方向进行深耕，做到精通。学习轨迹我也会尽量更新在本博客 😉</p><hr><p>现在是大三下学期，综合了风险和对应期望，老东西我还是要走上考研的道路了。鉴于之前走了不少错路，希望以后的每一步都能走的谨慎，能走到局部最优上。</p><p>博客也没时间更新了，等考完研吧😭</p><h2 id="后续投放内容-博客好像不支持插入代办"><a href="#后续投放内容-博客好像不支持插入代办" class="headerlink" title="后续投放内容(博客好像不支持插入代办)"></a>后续投放内容(博客好像不支持插入代办)</h2><ul><li>[ ] <del>自平衡摩托车调试记录</del></li><li>[ ] 日记&amp;随想</li><li>[ ] 地平线智慧医疗记录</li><li>[ ] 已刷番剧整理</li><li>[ ] 已刷小说&amp;书籍整理</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
