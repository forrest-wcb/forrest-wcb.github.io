<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Season 2 Episode 1-小站重生</title>
      <link href="/2025/01/05/i_m_back/"/>
      <url>/2025/01/05/i_m_back/</url>
      
        <content type="html"><![CDATA[<h1>Revival</h1><p>终于考完研了，感觉考研并没有想象中的那般糟糕。之前总是一昧厌恶应试教育，觉得其浪费时间且无用，但若目标是夯实理论知识基础，真正掌握知识，好像刷题备考<br>确实是一个 cost-effective 的方法。</p><p>复盘这次考研，虽然实际备考时间不长，也没有“想象中的我”那样努力，但先不论结果，单从过程来说，这段学习确实弥补了博主不少理论知识的缺陷，比如博主重新深入的学习了线性代数这门课，对线代的含义和其在工程中的广泛应用有了新的认知。之前大一的时候完全不知道这门课的意义何在（我宣布同济版线代教材已经不是本教材了），这门课最后也以惊喜的分数阻碍了我转去更心仪的专业 😅。总之，博主还是感谢备战考研的这一段时间和自己，如果还要再来一次的话当我没说。</p><p>耗费了一个周末打扫废弃的小站，添加了几个新功能（感谢 butterfly 主题更新了博主早就想要的说说功能），修复了几个历史遗留问题，小站现在涅槃升华，活出第二世 🎉。</p><p>关于之前立的美化 flag，博主感觉过分在意美化也许走了错路（不是我懒），将来的技能点也不会点在前端上，所以美化就这样吧，今后还是将重心转到内容创作上。</p><p>虽然还有复试的压力，但是博主现在的时间还是十分的充裕。博主又双叒叕打算定几个小目标，后续学习记录会尽量更新到博客。</p><!-- <ul>  <li><input type="checkbox" checked disabled> 图标</li>  <li><input type="checkbox" checked disabled> 吸底音乐播放器</li>  <li><input type="checkbox" checked disabled> 添加评论功能支持</li>  <li><input type="checkbox" checked disabled> live2D看板娘</li>  <li><input type="checkbox" checked disabled> 一图流背景</li>  <li><input type="checkbox" checked disabled> 上线说说功能</li>  <li><input type="checkbox" disabled> 明暗主题切换效果</li>  <li><input type="checkbox" disabled> 页脚徽标</li>  <li><input type="checkbox" disabled> 友链朋友圈(低优先级)</li></ul> -->]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>透视变换</title>
      <link href="/2025/01/04/%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2/"/>
      <url>/2025/01/04/%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>智能车传统组常使用“逆透视”的手段获取赛道俯视图，群友将这一思路移植到地平线组，在借鉴学习之后，记录于此。</p><h1>简介</h1><p><strong>透视变换（Perspective Transformation）</strong> 是一种常见的几何变换，用于处理图像中因视角变化产生的透视效果。基于射影几何，利用<strong>单应性矩阵（Homography Matrix，两个平面间的映射关系）</strong>，通过坐标的线性变换实现从一种透视视角到另一种视角的转换。</p><h1>数学原理</h1><p>透视变换使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">3\times3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> 的单应性矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>h</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>h</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>h</mi><mn>13</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>h</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>h</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>h</mi><mn>23</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>h</mi><mn>31</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>h</mi><mn>32</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>h</mi><mn>33</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">H=\begin{bmatrix}h_{11} &amp; h_{12} &amp; h_{13} \\h_{21} &amp; h_{22} &amp; h_{23} \\h_{31} &amp; h_{32} &amp; h_{33}\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">13</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>w</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mi>H</mi><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}x^{\prime} \\y^{\prime} \\w^{\prime}\end{bmatrix}=H\begin{bmatrix}x \\y \\1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>变换后需要通过归一化操作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mfrac><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><msup><mi>w</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mfrac><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mfrac><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><msup><mi>w</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mfrac></mrow><annotation encoding="application/x-tex">x&#x27; = \frac{x&#x27;}{w&#x27;}, y^{\prime} = \frac{y^{\prime}}{w^{\prime}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3185em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9735em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3706em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0256em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>得到实际坐标。</p><h2 id="齐次坐标表示二维点">齐次坐标表示二维点</h2><p>二维欧几里得空间中，一个点表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">[X,Y]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，在齐次坐标中表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">[x,y,w]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>为比例因子，实际坐标为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>X</mi><mo>=</mo><mfrac><mi>x</mi><mi>w</mi></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>Y</mi><mo>=</mo><mfrac><mi>y</mi><mi>w</mi></mfrac></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}X=\frac{x}{w}\\Y=\frac{y}{w}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">w=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>时即为常规的二维坐标，透视变换前一般默认<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">w=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，变换后需归一化保持一致性。</p><p><strong>为什么要引入齐次坐标？</strong></p><p>齐次坐标就是用 N+1 维向量表示 N 维坐标，即用齐次坐标系表示笛卡尔坐标系。引入齐次坐标旨在将各种几何变换都统一成矩阵相乘的形式，比如在二维坐标系中，平移变换只能用矩阵相加的形式表示，而在齐次坐标系中可用矩阵相乘的形式表示。</p><h2 id="单应性矩阵求解">单应性矩阵求解</h2><p>由于齐次坐标的比例不变性，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>H</mi></mrow><annotation encoding="application/x-tex">kH</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">k\ne0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，故矩阵只有 8 个自由度，仅需四对变换前后的坐标即可求解单应性矩阵。往往令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mn>33</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h_{33}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，求得唯一解。</p><h1>代码实现</h1><h2 id="选点">选点</h2><p>需要得到四对或以上点的变换前后坐标</p><h2 id="求解单应性矩阵">求解单应性矩阵</h2><p>通过 OpenCV 提供的函数进行求解，cv2.getPerspectiveTransform 由<strong>精确</strong>的四对点返回单应性矩阵，cv2.findHomography 从四对以上的点中多次取样，通过优化算法筛得最优解，有一定的误差容忍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 源点坐标 (四边形)</span><br>src_points = np.array([[<span class="hljs-number">100</span>, <span class="hljs-number">100</span>], [<span class="hljs-number">200</span>, <span class="hljs-number">100</span>], [<span class="hljs-number">200</span>, <span class="hljs-number">200</span>], [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>]], dtype=np.float32)<br><br><span class="hljs-comment"># 目标点坐标 (矩形)</span><br>dst_points = np.array([[<span class="hljs-number">50</span>, <span class="hljs-number">50</span>], [<span class="hljs-number">300</span>, <span class="hljs-number">50</span>], [<span class="hljs-number">300</span>, <span class="hljs-number">300</span>], [<span class="hljs-number">50</span>, <span class="hljs-number">300</span>]], dtype=np.float32)<br><br><span class="hljs-comment"># 计算单应性矩阵</span><br>H, status = cv2.findHomography(src_points, dst_points)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;单应性矩阵 H:&quot;</span>)<br><span class="hljs-built_in">print</span>(H)<br><br></code></pre></td></tr></table></figure><h2 id="进行透视变换">进行透视变换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 目标图像的尺寸 (宽, 高)</span><br>output_size = (<span class="hljs-number">300</span>, <span class="hljs-number">200</span>)<br><br><span class="hljs-comment"># 透视变换</span><br>warped_image = cv2.warpPerspective(image, M, output_size)<br><br><span class="hljs-comment"># 显示结果</span><br>cv2.imshow(<span class="hljs-string">&#x27;Warped Image&#x27;</span>, warped_image)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><h2 id="逆透视变换">逆透视变换</h2><p>如果想通过俯视图的坐标得到原图像对应坐标，对单应性矩阵求逆，进行变换即可。</p><hr><p>透视变换中的具体应用思路可借鉴(<a href="https://hibanaw.com/archives/171/">https://hibanaw.com/archives/171/</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA学习笔记</title>
      <link href="/2023/12/29/cuda/"/>
      <url>/2023/12/29/cuda/</url>
      
        <content type="html"><![CDATA[<h1>CUDA C/C++编程的学习</h1><p><strong>本文基于英伟达提供的线上自主学习课程</strong></p><p>加速计算正在取代 CPU 计算，成为最佳计算做法。加速计算带来的层出不穷的突破性进展、对加速应用程序日益增长的需求、轻松编写加速计算的编程规范以及支持加速计算的硬件的不断改进，所有这一切都在推动计算方式必然会过渡到加速计算。</p><h2 id="为-GPU-编写应用程序代码">为 GPU 编写应用程序代码</h2><p>以下是一个 <code>.cu</code> 文件（<code>.cu</code> 是 CUDA 加速程序的文件扩展名）。其中包含两个函数，第一个函数将在 CPU 上运行，第二个将在 GPU 上运行。请抽点时间找出这两个函数在定义方式和调用方式上的差异。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CPUFunction</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This function is defined to run on the CPU.\n&quot;</span>);<br>&#125;<br><br>__global__ <span class="hljs-type">void</span> <span class="hljs-title function_">GPUFunction</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This function is defined to run on the GPU.\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  CPUFunction();<br><br>  GPUFunction&lt;&lt;&lt;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&gt;&gt;&gt;();<br>  cudaDeviceSynchronize();<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是一些需要特别注意的重要代码行，以及加速计算中使用的一些其他常用术语：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">__global__ void GPUFunction()<br></code></pre></td></tr></table></figure><ul><li><code>__global__</code> 关键字表明以下函数将在 GPU 上运行并可<strong>全局</strong>调用，而在此种情况下，则指由 CPU 或 GPU 调用。</li><li>通常，我们将在 CPU 上执行的代码称为<strong>主机</strong>代码，而将在 GPU 上运行的代码称为<strong>设备</strong>代码。</li><li>注意返回类型为 <code>void</code>。使用 <code>__global__</code> 关键字定义的函数需要返回 <code>void</code> 类型。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GPUFunction&lt;&lt;&lt;1, 1&gt;&gt;&gt;();<br></code></pre></td></tr></table></figure><ul><li>通常，当调用要在 GPU 上运行的函数时，我们将此种函数称为<strong>已启动</strong>的<strong>核函数</strong>。</li><li>启动核函数时，我们必须提供<strong>执行配置</strong>，即在向核函数传递任何预期参数之前使用 <code>&lt;&lt;&lt; ... &gt;&gt;&gt;</code> 语法完成的配置。</li><li>在宏观层面，程序员可通过执行配置为核函数启动指定<strong>线程层次结构</strong>，从而定义线程组（称为<strong>线程块</strong>）的数量，以及要在每个线程块中执行的<strong>线程</strong>数量。稍后将在本实验深入探讨执行配置，但现在请注意正在使用包含 <code>1</code> 线程（第二个配置参数）的 <code>1</code> 线程块（第一个执行配置参数）启动核函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cudaDeviceSynchronize();<br></code></pre></td></tr></table></figure><ul><li>与许多 C/C++ 代码不同，核函数启动方式为<strong>异步</strong>：CPU 代码将继续执行<em>而无需等待核函数完成启动</em>。</li><li>调用 CUDA 运行时提供的函数 <code>cudaDeviceSynchronize</code> 将导致主机 (CPU) 代码暂作等待，直至设备 (GPU) 代码执行完成，才能在 CPU 上恢复执行。</li></ul><h3 id="练习">练习</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">helloCPU</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello from the CPU.\n&quot;</span>);<br>&#125;<br><br>__global__ <span class="hljs-type">void</span> <span class="hljs-title function_">helloGPU</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello from the GPU.\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>  helloCPU();<br><br>  helloGPU&lt;&lt;&lt;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&gt;&gt;&gt;();<br><br>  cudaDeviceSynchronize();<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是对 nvidia 所给例子<a href="http://dli-604a4aa51b37-99aaad.aws.labs.courses.nvidia.com/lab/edit/01-hello/01-hello-gpu.cu"><code>01-hello-gpu.cu</code></a> 的重构，运行结果为先后次序打印 Hello from the CPU.和 Hello from the GPU.</p><ul><li><p>从核函数定义中删除关键字 <code>__global__</code>。注意错误中的行号：您认为错误中的 \”configured\” 是什么意思？完成后，请替换 <code>__global__</code>。</p><p>报错 a host function call cannot be configured。</p><p>未声明关键字__global__，函数不可被&lt;&lt;&lt;…&gt;&gt;&gt;配置</p></li><li><p>移除执行配置：您对 \”configured\” 的理解是否仍旧合理？完成后，请替换执行配置。</p><p>报错 a __global__ function call must be configured。</p><p>启动核函数必须提供执行配置。</p></li><li><p>移除对 <code>cudaDeviceSynchronize</code> 的调用。在编译和运行代码之前，猜猜会发生什么情况，可以回顾一下核函数采取的是异步启动，且 <code>cudaDeviceSynchronize</code> 会使主机执行暂作等待，直至核函数执行完成后才会继续。完成后，请替换对 <code>cudaDeviceSynchronize</code> 的调用。</p><p>只打印 Hello from the CPU.</p><p>核函数异步启动，CPU 将继续执行而不会等待 GPU 执行完成</p></li><li><p>重构 <code>01-hello-gpu.cu</code>，以便 <code>Hello from the GPU</code> 在 <code>Hello from the CPU</code> <strong>之前</strong>打印。</p><p>将<code>helloGPU&lt;&lt;&lt;1,1&gt;&gt;&gt;();</code>及<code>cudaDeviceSynchronize();</code>移至 helloCPU()前，main()如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">helloGPU&lt;&lt;&lt;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&gt;&gt;&gt;();<br>cudaDeviceSynchronize();<br>helloCPU();<br></code></pre></td></tr></table></figure><p>cudaDeviceSynchronize();必须调至 helloCPU 前，若只改动 helloGPU 打印结果顺序不会变。</p></li><li><p>重构 <code>01-hello-gpu.cu</code>，以便 <code>Hello from the GPU</code> 打印<strong>两次</strong>，一次是在 <code>Hello from the CPU</code> <strong>之前</strong>，另一次是在 <code>Hello from the CPU</code> <strong>之后</strong>。</p><p>重构后 main 函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">helloGPU&lt;&lt;&lt;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&gt;&gt;&gt;();<br>cudaDeviceSynchronize();<span class="hljs-comment">//等待第一个Hello from the GPU</span><br>helloCPU();<span class="hljs-comment">//打印Hello from the CPU</span><br>helloGPU&lt;&lt;&lt;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&gt;&gt;&gt;();<br>cudaDeviceSynchronize();<span class="hljs-comment">//等待第二个Hello from the GPU</span><br></code></pre></td></tr></table></figure><h3 id="编译并运行加速后的-CUDA-代码">编译并运行加速后的 CUDA 代码</h3><p>CUDA 平台附带 <a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html"><strong>NVIDIA CUDA 编译器</strong></a> <code>nvcc</code>，可以编译 CUDA 加速应用程序，其中包含主机和设备代码。</p><p>曾使用过 <code>gcc</code> 的用户会对 <code>nvcc</code> 感到非常熟悉。例如，编译 <code>some-CUDA.cu</code> 文件就很简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nvcc -arch=sm_70 -o out some-CUDA.cu -run<br></code></pre></td></tr></table></figure><ul><li><code>nvcc</code> 是使用 <code>nvcc</code> 编译器的命令行命令。</li><li>将 <code>some-CUDA.cu</code> 作为文件传递以进行编译。</li><li><code>o</code> 标志用于指定编译程序的输出文件。</li><li><code>arch</code> 标志表示该文件必须编译为哪个<strong>架构</strong>类型。本示例中，<code>sm_70</code> 将用于专门针对本实验运行的 Volta GPU 进行编译，但有意深究的用户可以参阅有关 <a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#options-for-steering-gpu-code-generation"><code>arch</code> 标志</a>、<a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list">虚拟架构特性</a> 和 <a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list">GPU 特性</a> 的文档。</li><li>为方便起见，提供 <code>run</code> 标志将执行已成功编译的二进制文件。</li></ul></li></ul><h2 id="启动并行运行的核函数">启动并行运行的核函数</h2><p>程序员可通过执行配置指定有关如何启动核函数以在多个 GPU <strong>线程</strong>中并行运行的详细信息。更准确地说，程序员可通过执行配置指定线程组（称为<strong>线程块</strong>或简称为<strong>块</strong>）数量以及其希望每个线程块所包含的线程数量。执行配置的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;&lt;&lt;线程块数, 每个线程块的线程数&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p><strong>启动核函数时，核函数代码由每个已配置的线程块中的每个线程执行</strong>。</p><p>因此，如果假设已定义一个名为 <code>someKernel</code> 的核函数，则下列情况为真：</p><ul><li><code>someKernel&lt;&lt;&lt;1, 1&gt;&gt;()</code> 配置为在具有单线程的单个线程块中运行后，将只运行一次。</li><li><code>someKernel&lt;&lt;&lt;1, 10&gt;&gt;()</code> 配置为在具有 10 线程的单个线程块中运行后，将运行 10 次。</li><li><code>someKernel&lt;&lt;&lt;10, 1&gt;&gt;()</code> 配置为在 10 个线程块（每个均具有单线程）中运行后，将运行 10 次。</li><li><code>someKernel&lt;&lt;&lt;10, 10&gt;&gt;()</code> 配置为在 10 个线程块（每个均具有 10 线程）中运行后，将运行 100 次。</li></ul><h2 id="线程和块的索引">线程和块的索引</h2><p>每个线程在其线程块内部均会被分配一个索引，从 <code>0</code> 开始。此外，每个线程块也会被分配一个索引，并从 <code>0</code> 开始。正如线程组成线程块，线程块又会组成<strong>网格</strong>，而网格是 CUDA 线程层次结构中级别最高的实体。简言之，CUDA 核函数在由一个或多个线程块组成的网格中执行，且每个线程块中均包含相同数量的一个或多个线程。</p><ul><li>gridDim.x：网格中的线程块数</li><li>blockIdx.x：网格中线程块的索引</li><li>blockDim.x：线程块中的线程数</li><li>threadIdx.x：块中线程的索引</li></ul><p>CUDA 核函数可以访问能够识别如下两种索引的特殊变量：正在执行核函数的线程（位于线程块内）索引和线程所在的线程块（位于网格内）索引。这两种变量分别为 <code>threadIdx.x</code> 和 <code>blockIdx.x</code>。</p><h2 id="加速-for-循环">加速 for 循环</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> N = <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>&#125;<br></code></pre></td></tr></table></figure><p>如要并行此循环，必须执行以下 2 个步骤：</p><ul><li>必须编写完成<strong>循环的单次迭代</strong>工作的核函数。</li><li>由于核函数与其他正在运行的核函数无关，因此执行配置必须使核函数执行正确的次数，例如循环迭代的次数。</li></ul><h3 id="练习：使用单个线程块加速-for-循环">练习：使用单个线程块加速 for 循环</h3><p><a href="http://dli-604a4aa51b37-24abdb.aws.labs.courses.nvidia.com/lab/edit/04-loops/01-single-block-loop.cu"><code>01-single-block-loop.cu</code></a> 内的 <code>loop</code> 函数运行着一个“for 循环”并将连续打印 <code>0</code> 至 <code>9</code> 之间的所有数字。将 <code>loop</code> 函数重构为 CUDA 核函数，使其在启动后并行执行 <code>N</code> 次迭代。重构成功后，应仍能打印 <code>0</code> 至 <code>9</code> 之间的所有数字。</p><p>原代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span><br>&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span> ; i&lt;N ; i++)<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is iteration number %d\n&quot;</span>,i);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> N =<span class="hljs-number">10</span>;<br>  loop(N);<br>&#125;<br></code></pre></td></tr></table></figure><p>重构后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>__global__ <span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is iteration number %d\n&quot;</span>,threadIdx.x);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  loop&lt;&lt;&lt;<span class="hljs-number">1</span>,<span class="hljs-number">10</span>&gt;&gt;&gt;();<br>  cudaDeviceSynchronize();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注：每个线程块内，thread.x 的输出顺序是有序的，而不同线程块间的输出是无序的。如下，输出是无序的。但是若改为 loop&lt;&lt;&lt;10,2&gt;&gt;&gt;();可以发现仅线程块输出结果间是无序的，同一线程块内线程输出结果是有序的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>__global__ <span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is iteration number %d\n&quot;</span>,blockIdx.x);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  loop&lt;&lt;&lt;<span class="hljs-number">10</span>,<span class="hljs-number">1</span>&gt;&gt;&gt;();<br>  cudaDeviceSynchronize();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>*查阅了一些资料，询问了老师之后，得知严格意义上线程块和线程的输出顺序是无法控制的，“并行本身其实就不应该控制先后顺序的，如果需要控制的话，那就说明这个任务不适合做矢量化了，因为他是顺序依赖的”，这里的线程输出有序，猜测是因为显示系统进行了后处理。*所以在实际使用中需要考虑使用线程块加速的适用性。</p><h2 id="调整线程块的大小以实现更多的并行化">调整线程块的大小以实现更多的并行化</h2><p>线程块包含的线程具有数量限制：确切地说是 1024 个。为增加加速应用程序中的并行量，我们必须要能在多个线程块之间进行协调。</p><p>CUDA 核函数可以访问给出块中线程数的特殊变量：<code>blockDim.x</code>。通过将此变量与 <code>blockIdx.x</code> 和 <code>threadIdx.x</code> 变量结合使用，并借助惯用表达式 <code>threadIdx.x + blockIdx.x * blockDim.x</code> 在包含多个线程的多个线程块之间组织并行执行，并行性将得以提升。以下是详细示例。</p><p>执行配置 <code>&lt;&lt;&lt;10, 10&gt;&gt;&gt;</code> 将启动共计拥有 100 个线程的网格，这些线程均包含在由 10 个线程组成的 10 个线程块中。因此，我们希望每个线程（<code>0</code> 至 <code>99</code> 之间）都能计算该线程的某个唯一索引。</p><ul><li>如果线程块 <code>blockIdx.x</code> 等于 <code>0</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>0</code>。向 <code>0</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>0</code> 至 <code>9</code>。</li><li>如果线程块 <code>blockIdx.x</code> 等于 <code>1</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>10</code>。向 <code>10</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>10</code> 至 <code>19</code>。</li></ul><h2 id="分配将要在-GPU-和-CPU-上访问的内存">分配将要在 GPU 和 CPU 上访问的内存</h2><p>CUDA 的最新版本（版本 6 和更高版本）已能轻松分配可用于 CPU 主机和任意数量 GPU 设备的内存。尽管现今有许多适用于内存管理并可支持加速应用程序中最优性能的 <a href="http://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#memory-optimizations">中高级技术</a>，但我们现在要介绍的基础 CUDA 内存管理技术不但能够支持远超 CPU 应用程序的卓越性能，而且几乎不会产生任何开发人员成本。</p><p>如要分配和释放内存，并获取可在主机和设备代码中引用的指针，请使用 <code>cudaMallocManaged</code> 和 <code>cudaFree</code> 取代对 <code>malloc</code> 和 <code>free</code> 的调用，如下例所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 只有CPU</span><br><span class="hljs-type">int</span> N = <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">20</span>;<br><span class="hljs-type">size_t</span> size = N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> *a;<br><br>a = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(size);<br><span class="hljs-built_in">free</span>(a);<br><br><span class="hljs-comment">// 加速后</span><br><span class="hljs-type">int</span> N = <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">20</span>;<br><span class="hljs-type">size_t</span> size = N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> *a;<br><span class="hljs-comment">// a的地址作为第一个参数传递</span><br><span class="hljs-built_in">cudaMallocManaged</span>(&amp;a, size);<br><span class="hljs-built_in">cudaFree</span>(a);<br></code></pre></td></tr></table></figure><h2 id="网格大小与工作量不匹配">网格大小与工作量不匹配</h2><p>可能会出现这样的情况，执行配置所创建的线程数无法匹配为实现并行循环所需的线程数。</p><p>一个常见的例子与希望选择的最佳线程块大小有关。例如，鉴于 GPU 的硬件特性，所含线程的数量为 32 的倍数的线程块是最理想的选择，因其具备性能上的优势。假设我们要启动一些线程块且每个线程块中均包含 256 个线程（32 的倍数），并需运行 1000 个并行任务（此处使用极小的数量以便于说明），则任何数量的线程块均无法在网格中精确生成 1000 个总线程，因为没有任何整数值在乘以 32 后可以恰好等于 1000。</p><p>这个问题可以通过以下方式轻松地解决：</p><ul><li>编写执行配置，使其创建的线程数<strong>超过</strong>执行分配工作所需的线程数。</li><li>将一个值作为参数传递到核函数 (<code>N</code>) 中，该值表示要处理的数据集总大小或完成工作所需的总线程数。</li><li>计算网格内的线程索引后（使用 <code>threadIdx + blockIdx*blockDim</code>），请检查该索引是否超过 <code>N</code>，并且只在不超过的情况下执行与核函数相关的工作。</li></ul><p>以下是编写执行配置的惯用方法示例，适用于 <code>N</code> 和线程块中的线程数已知，但无法保证网格中的线程数和 <code>N</code> 之间完全匹配的情况。如此一来，便可确保网格中至少始终拥有 <code>N</code> 所需的线程数，且超出的线程数至多仅可相当于 1 个线程块的线程数量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// N已知</span><br><span class="hljs-type">int</span> N = <span class="hljs-number">100000</span>;<br><br><span class="hljs-comment">// 每个线程块均包含256个线程</span><br><span class="hljs-type">size_t</span> threads_per_block = <span class="hljs-number">256</span>;<br><br><span class="hljs-comment">// 确保网格中至少始终拥有 `N` 所需的线程数，且超出的线程数至多仅可相当于 1 个线程块的线程数量</span><br><span class="hljs-type">size_t</span> number_of_blocks = (N + threads_per_block - <span class="hljs-number">1</span>) / threads_per_block;<br><br>some_kernel&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;(N);<br></code></pre></td></tr></table></figure><p>由于上述执行配置致使网格中的线程数超过 <code>N</code>，因此需要注意 <code>some_kernel</code> 定义中的内容，以确保 <code>some_kernel</code> 在由其中一个 ”额外的” 线程执行时不会尝试访问超出范围的数据元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__global__ <span class="hljs-title">some_kernel</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> idx = threadIdx.x + blockIdx.x * blockDim.x;<br><br>  <span class="hljs-keyword">if</span> (idx &lt; N) <span class="hljs-comment">// 检查线程索引是否超过N</span><br>  &#123;<br>    <span class="hljs-comment">//条件满足时执行</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="跨网格的循环">跨网格的循环</h2><p>或出于选择，为了要创建具有超高性能的执行配置，或出于需要，一个网格中的线程数量可能会小于数据集的大小。请思考一下包含 1000 个元素的数组和包含 250 个线程的网格（此处使用极小的规模以便于说明）。此网格中的每个线程将需使用 4 次。如要实现此操作，一种常用方法便是在核函数中使用<strong>跨网格循环</strong>。</p><p>在跨网格循环中，每个线程将在网格内使用 <code>threadIdx + blockIdx*blockDim</code> 计算自身唯一的索引，并对数组内该索引的元素执行相应运算，然后将网格中的线程数添加到索引并重复此操作，直至超出数组范围。例如，对于包含 500 个元素的数组和包含 250 个线程的网格，网格中索引为 20 的线程将执行如下操作：</p><ul><li>对包含 500 个元素的数组的元素 20 执行相应运算</li><li>将其索引增加 250，使网格的大小达到 270</li><li>对包含 500 个元素的数组的元素 270 执行相应运算</li><li>将其索引增加 250，使网格的大小达到 520</li><li>由于 520 现已超出数组范围，因此线程将停止工作</li></ul><p>CUDA 提供一个可给出网格中线程块数的特殊变量：<code>gridDim.x</code>。然后计算网格中的总线程数，即网格中的线程块数乘以每个线程块中的线程数：<code>gridDim.x * blockDim.x</code>。带着这样的想法来看看以下核函数中网格跨度循环的详细示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">kernel</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> indexWithinTheGrid = threadIdx.x + blockIdx.x * blockDim.x;<br>  <span class="hljs-type">int</span> gridStride = gridDim.x * blockDim.x;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = indexWithinTheGrid; i &lt; N; i += gridStride)<br>  &#123;<br>    <span class="hljs-comment">// do work on a[i];</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="错误处理">错误处理</h2><ol><li>与在任何应用程序中一样，加速 CUDA 代码中的错误处理同样至关重要。即便不是大多数，也有许多 CUDA 函数（例如，<a href="http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY">内存管理函数</a>）会返回类型为 <code>cudaError_t</code> 的值，该值可用于检查调用函数时是否发生错误。以下是对调用 <code>cudaMallocManaged</code> 函数执行错误处理的示例：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cudaError_t err;<br>err = <span class="hljs-built_in">cudaMallocManaged</span>(&amp;a, N)                    <span class="hljs-comment">// Assume the existence of `a` and `N`.</span><br><br><span class="hljs-keyword">if</span> (err != cudaSuccess)                           <span class="hljs-comment">// `cudaSuccess` is provided by CUDA.</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, <span class="hljs-built_in">cudaGetErrorString</span>(err)); <span class="hljs-comment">// `cudaGetErrorString` is provided by CUDA.</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>启动定义为返回 <code>void</code> 的核函数后，将不会返回类型为 <code>cudaError_t</code> 的值。为检查启动核函数时是否发生错误（例如，如果启动配置错误），CUDA 提供 <code>cudaGetLastError</code> 函数，该函数会返回类型为 <code>cudaError_t</code> 的值。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This launch should cause an error, but the kernel itself</span><br><span class="hljs-comment"> * cannot return it.</span><br><span class="hljs-comment"> */</span><br><br>someKernel&lt;&lt;&lt;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&gt;&gt;&gt;();  <span class="hljs-comment">// -1 is not a valid number of threads.</span><br><br>cudaError_t err;<br>err = <span class="hljs-built_in">cudaGetLastError</span>(); <span class="hljs-comment">// `cudaGetLastError` will return the error from above.</span><br><span class="hljs-keyword">if</span> (err != cudaSuccess)<br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, <span class="hljs-built_in">cudaGetErrorString</span>(err));<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>最后，为捕捉异步错误（例如，在异步核函数执行期间），请务必检查后续同步 CUDA 运行时 API 调用所返回的状态（例如 <code>cudaDeviceSynchronize</code>）；如果之前启动的其中一个核函数失败，则将返回错误。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">cudaError_t err;<br>err = cudaDeviceSynchronize();                <span class="hljs-comment">// Assume the existence of `a` and `N`.</span><br><br><span class="hljs-keyword">if</span> (err != cudaSuccess)                           <span class="hljs-comment">// `cudaSuccess` is provided by CUDA.</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, cudaGetErrorString(err)); <span class="hljs-comment">// `cudaGetErrorString` is provided by CUDA.</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CUDA-错误处理功能">CUDA 错误处理功能</h3><p>创建一个包装 CUDA 函数调用的宏对于检查错误十分有用。以下是一个宏示例，您可以在余下练习中随时使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> cudaError_t <span class="hljs-title">checkCuda</span><span class="hljs-params">(cudaError_t result)</span><span class="hljs-comment">//inline 关键字提示编译器尝试将该函数内联，这可以提高性能。</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (result != cudaSuccess) &#123;<span class="hljs-comment">//这个条件检查CUDA操作的结果是否不等于 cudaSuccess。如果发生错误，则执行if块内的代码。</span><br>    <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;CUDA Runtime Error: %s\n&quot;</span>, <span class="hljs-built_in">cudaGetErrorString</span>(result));<br>    <span class="hljs-built_in">assert</span>(result == cudaSuccess);<span class="hljs-comment">//使用 assert 宏检查结果是否等于 cudaSuccess。如果不等于，这会触发一个断言失败，如果启用了断言，程序将终止。</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*...*/</span><br>  <span class="hljs-built_in">checkCuda</span>( <span class="hljs-built_in">cudaDeviceSynchronize</span>() )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-维和-3-维的网格和块">2 维和 3 维的网格和块</h2><p>可以将网格和线程块定义为最多具有 3 个维度。使用多个维度定义网格和线程块绝不会对其性能造成任何影响，但这在处理具有多个维度的数据时可能非常有用，例如 2D 矩阵。如要定义二维或三维网格或线程块，可以使用 CUDA 的 <code>dim3</code> 类型，即如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">dim3 <span class="hljs-title">threads_per_block</span><span class="hljs-params">(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-function">dim3 <span class="hljs-title">number_of_blocks</span><span class="hljs-params">(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>)</span></span>;<br>someKernel&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;();<br></code></pre></td></tr></table></figure><p>鉴于以上示例，<code>someKernel</code> 内部的变量 <code>gridDim.x</code>、<code>gridDim.y</code>、<code>blockDim.x</code> 和 <code>blockDim.y</code> 均将等于 <code>16</code>。</p><p>此处介绍一个万能的索引计算式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> tid = blockIdx.z * (gridDim.x * gridDim.y) * (blockDim.x * blockDim.y * blockDim.z)\<br>    <span class="hljs-comment">//块在z方向上的索引</span><br>          + blockIdx.y * gridDim.x * (blockDim.x * blockDim.y * blockDim.z) \<br>    <span class="hljs-comment">//块在y方向上的索引</span><br>          + blockIdx.x * (blockDim.x * blockDim.y * blockDim.z) \<br>    <span class="hljs-comment">//块在x方向上的索引</span><br>        + threadIdx.z * (blockDim.x * blockDim.y) \<br>    <span class="hljs-comment">//线程在z方向上的索引</span><br>          + threadIdx.y * blockDim.x \<br>    <span class="hljs-comment">//线程在y方向上的索引</span><br>          + threadIdx.x;<br>    <span class="hljs-comment">//线程在x方向上的索引</span><br></code></pre></td></tr></table></figure><h1><strong>使用 CUDA C/C++ 统一内存和 Nsight Systems (nsys) 管理加速应用程序内存</strong></h1><h2 id="学习目标">学习目标</h2><p>当您在本实验完成学习后，您将能够：</p><ul><li>使用 <strong>Nsight Systems 命令行分析器</strong> (<strong>nsys</strong>) 分析被加速的应用程序的性能。</li><li>利用对<strong>流多处理器</strong>的理解优化执行配置。</li><li>理解<strong>统一内存</strong>在页错误和数据迁移方面的行为。</li><li>使用<strong>异步内存预取</strong>减少页错误和数据迁移以提高性能。</li><li>采用循环式的迭代开发加快应用程序的优化加速和部署。</li></ul><h2 id="使用-nsys-性能分析器帮助应用程序迭代地进行优化">使用 nsys 性能分析器帮助应用程序迭代地进行优化</h2><p>如要确保优化加速代码库的尝试真正取得成功，唯一方法便是分析应用程序以获取有关其性能的定量信息。<code>nsys</code> 是指 NVIDIA 的 Nsight System 命令行分析器。该分析器附带于 CUDA 工具包中，提供分析被加速的应用程序性能的强大功能。</p><p><code>nsys</code> 使用起来十分简单，最基本用法是向其传递使用 <code>nvcc</code> 编译的可执行文件的路径。随后 <code>nsys</code> 会继续执行应用程序，并在此之后打印应用程序 GPU 活动的摘要输出、CUDA API 调用以及<strong>统一内存</strong>活动的相关信息。我们稍后会在本实验中详细介绍这一主题。</p><p>在加速应用程序或优化已经加速的应用程序时，我们应该采用科学的迭代方法。作出更改后需分析应用程序、做好记录并记录任何重构可能会对性能造成何种影响。尽早且经常进行此类观察通常会让您轻松获得足够的性能提升，以助您发布加速应用程序。此外，经常分析应用程序将使您了解到对 CUDA 代码库作出的特定更改会对其实际性能造成何种影响：而当只在代码库中进行多种更改后再分析应用程序时，将很难得知这一点。</p><p><code>nsys profile</code>将生成一个<code>qdrep</code>报告文件，该文件可以以多种方式使用。 我们在这里使用<code>--stats = true</code>标志表示我们希望打印输出摘要统计信息。 输出的信息有很多，包括：</p><ul><li>配置文件配置详细信息</li><li>报告文件的生成详细信息</li><li><strong>CUDA API 统计信息</strong></li><li><strong>CUDA 核函数的统计信息</strong></li><li><strong>CUDA 内存操作统计信息（时间和大小）</strong></li><li>操作系统内核调用接口的统计信息</li></ul><p>值得一提的是，默认情况下，<code>nsys profile</code>不会覆盖现有的报告文件。 这样做是为了防止在进行概要分析时意外丢失工作。 如果出于某种原因，您宁愿覆盖现有的报告文件，例如在快速迭代期间，可以向<code>nsys profile</code>提供<code>-f</code>标志以允许覆盖现有的报告文件。</p><p><strong>练习</strong></p><p>优化前<a href="http://dli-604a4aa51b37-ee1ab7.aws.labs.courses.nvidia.com/lab/edit/01-vector-add/01-vector-add.cu">01-vector-add.cu</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initWith</span><span class="hljs-params">(<span class="hljs-type">float</span> num, <span class="hljs-type">float</span> *a, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>  &#123;<br>    a[i] = num;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Device kernel stores into `result` the sum of each</span><br><span class="hljs-comment"> * same-indexed value of `a` and `b`.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function">__global__</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addVectorsInto</span><span class="hljs-params">(<span class="hljs-type">float</span> *result, <span class="hljs-type">float</span> *a, <span class="hljs-type">float</span> *b, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;<br>  <span class="hljs-type">int</span> stride = blockDim.x * gridDim.x;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = index; i &lt; N; i += stride)<br>  &#123;<br>    result[i] = a[i] + b[i];<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Host function to confirm values in `vector`. This function</span><br><span class="hljs-comment"> * assumes all values are the same `target` value.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">checkElementsAre</span><span class="hljs-params">(<span class="hljs-type">float</span> target, <span class="hljs-type">float</span> *vector, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span>(vector[i] != target)<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FAIL: vector[%d] - %0.0f does not equal %0.0f\n&quot;</span>, i, vector[i], target);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Success! All values calculated correctly.\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">24</span>;<br>  <span class="hljs-type">size_t</span> size = N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>);<br><br>  <span class="hljs-type">float</span> *a;<br>  <span class="hljs-type">float</span> *b;<br>  <span class="hljs-type">float</span> *c;<br><br>  <span class="hljs-built_in">cudaMallocManaged</span>(&amp;a, size);<br>  <span class="hljs-built_in">cudaMallocManaged</span>(&amp;b, size);<br>  <span class="hljs-built_in">cudaMallocManaged</span>(&amp;c, size);<br><br>  <span class="hljs-built_in">initWith</span>(<span class="hljs-number">3</span>, a, N);<br>  <span class="hljs-built_in">initWith</span>(<span class="hljs-number">4</span>, b, N);<br>  <span class="hljs-built_in">initWith</span>(<span class="hljs-number">0</span>, c, N);<br><br>  <span class="hljs-type">size_t</span> threadsPerBlock;<br>  <span class="hljs-type">size_t</span> numberOfBlocks;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * nsys should register performance changes when execution configuration</span><br><span class="hljs-comment">   * is updated.</span><br><span class="hljs-comment">   */</span><br><br>  threadsPerBlock = <span class="hljs-number">1</span>;<br>  numberOfBlocks = <span class="hljs-number">1</span>;<br><br>  cudaError_t addVectorsErr;<br>  cudaError_t asyncErr;<br><br>  addVectorsInto&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(c, a, b, N);<br><br>  addVectorsErr = <span class="hljs-built_in">cudaGetLastError</span>();<br>  <span class="hljs-keyword">if</span>(addVectorsErr != cudaSuccess) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, <span class="hljs-built_in">cudaGetErrorString</span>(addVectorsErr));<br><br>  asyncErr = <span class="hljs-built_in">cudaDeviceSynchronize</span>();<br>  <span class="hljs-keyword">if</span>(asyncErr != cudaSuccess) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, <span class="hljs-built_in">cudaGetErrorString</span>(asyncErr));<br><br>  <span class="hljs-built_in">checkElementsAre</span>(<span class="hljs-number">7</span>, c, N);<br><br>  <span class="hljs-built_in">cudaFree</span>(a);<br>  <span class="hljs-built_in">cudaFree</span>(b);<br>  <span class="hljs-built_in">cudaFree</span>(c);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>优化将 77 行的的 threadsPerblock 改为 1024 即可，分析可得核函数运行时间加快了一个量级，此外 cudaDeviceSynchronize()运行时间也大幅缩短，易于理解。</p><h2 id="流多处理器（Streaming-Multiprocessors）及查询-GPU-的设备配置">流多处理器（Streaming Multiprocessors）及查询 GPU 的设备配置</h2><h3 id="流多处理器和-Warps">流多处理器和 Warps</h3><p>运行 CUDA 应用程序的 GPU 具有称为<strong>流多处理器</strong>（或 <strong>SM</strong>）的处理单元。在核函数执行期间，将线程块提供给 SM 以供其执行。为支持 GPU 执行尽可能多的并行操作，您通常可以<em>选择线程块数量数倍于指定 GPU 上 SM 数量的网格大小</em>来提升性能。（提高 SM 的利用率）</p><p>此外，SM 会在一个名为<strong>warp</strong>的线程块内创建、管理、调度和执行包含 32 个线程的线程组。值得注意的是，可以<em>分配数量数倍于 32 的线程数量</em>来提升性能。</p><h3 id="以编程方式查询-GPU-设备属性">以编程方式查询 GPU 设备属性</h3><p>由于 GPU 上的 SM 数量会因所用的特定 GPU 而异，因此为支持可移植性，您不得将 SM 数量硬编码到代码库中。相反，应该以编程方式获取此信息。</p><p>以下所示为在 CUDA C/C++ 中获取 C 结构的方法，该结构包含当前处于活动状态的 GPU 设备的多个属性，其中包括设备的 SM 数量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> deviceId;<br><span class="hljs-built_in">cudaGetDevice</span>(&amp;deviceId);                  <span class="hljs-comment">// `deviceId`现在指向活动的GPU</span><br><br>cudaDeviceProp props;<br><span class="hljs-built_in">cudaGetDeviceProperties</span>(&amp;props, deviceId); <span class="hljs-comment">// `props` 现在有很多有用的关于主用GPU设备的属性</span><br><br></code></pre></td></tr></table></figure><h3 id="查询设备信息">查询设备信息</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>  <span class="hljs-type">int</span> deviceId;<br>  <span class="hljs-built_in">cudaGetDevice</span>(&amp;deviceId);<br><br>  cudaDeviceProp props;<br>  <span class="hljs-built_in">cudaGetDeviceProperties</span>(&amp;props, deviceId);<br><br>  <span class="hljs-type">int</span> computeCapabilityMajor = props.major;<br>  <span class="hljs-type">int</span> computeCapabilityMinor = props.minor;<br>  <span class="hljs-type">int</span> multiProcessorCount = props.multiProcessorCount;<br>  <span class="hljs-type">int</span> warpSize = props.warpSize;<br><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Device ID: %d\nNumber of SMs: %d\nCompute Capability Major: %d\nCompute Capability Minor: %d\nWarp Size: %d\n&quot;</span>, deviceId, multiProcessorCount, computeCapabilityMajor, computeCapabilityMinor, warpSize);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果样式下图</p><p><img src="https://cdn.jsdelivr.net/gh/forrest-wcb/markdown_img@main/img/202312292237862.png" alt="image-20231220165103264"></p><ul><li><strong>Compute Capability Major（计算能力主版本）：</strong> 这是主要版本号，表示 GPU 架构的主要特性。较新的主要版本通常支持更多的功能和性能提升。例如，Compute Capability Major 7 表示该 GPU 属于较新的架构。</li><li><strong>Compute Capability Minor（计算能力次版本）：</strong> 这是次要版本号，表示 GPU 架构的次要特性。通常，次要版本的提升表示一些较小的改进或优化。Compute Capability Minor 5 表示该 GPU 的次要版本。</li></ul><h3 id="将网格数调整为-SM-数，进一步优化矢量加法">将网格数调整为 SM 数，进一步优化矢量加法</h3><p>得知设备信息后，对执行配置进行调整，对 <a href="http://01-vector-add.cu">01-vector-add.cu</a> 进一步优化。</p><p>线程块调整为 80，线程数调成为 640，重复多次运行分析，核函数运行时间约在 0.12s 左右，相比优化前的 2.35s，以及上文的优化结果 0.145s，有了不小的进步。</p><h2 id="获得统一内存的细节">获得统一内存的细节</h2><h3 id="统一内存-UM-的迁移">统一内存(UM)的迁移</h3><p>分配 UM 时，内存尚未驻留在主机或设备上。主机或设备尝试访问内存时会发生 <a href="https://en.wikipedia.org/wiki/Page_fault">页错误</a>，此时主机或设备会批量迁移所需的数据。同理，当 CPU 或加速系统中的任何 GPU 尝试访问尚未驻留在其上的内存时，会发生页错误并触发迁移。</p><p>能够执行页错误并按需迁移内存对于在加速应用程序中简化开发流程大有助益。此外，在处理展示稀疏访问模式的数据时（例如，在应用程序实际运行之前无法得知需要处理的数据时），以及在具有多个 GPU 的加速系统中，数据可能由多个 GPU 设备访问时，按需迁移内存将会带来显著优势。</p><p>有些情况下（例如，在运行时之前需要得知数据，以及需要大量连续的内存块时），我们还能有效规避页错误和按需数据迁移所产生的开销。</p><p>本实验的后续内容将侧重于对按需迁移的理解，以及如何在分析器输出中识别按需迁移。这些知识可让您在享受按需迁移优势的同时，减少其产生的开销。</p><h3 id="练习：探索统一内存（UM）的页错误">练习：探索统一内存（UM）的页错误</h3><p><code>nsys profile</code> 会提供描述所分析应用程序 UM 行为的输出。在本练习中，您将对一个简单的应用程序做出一些修改，并会在每次更改后利用 <code>nsys profile</code> 的统一内存输出部分，探讨 UM 数据迁移的行为方式。</p><p><a href="http://dli-604a4aa51b37-46802e.aws.labs.courses.nvidia.com/lab/edit/06-unified-memory-page-faults/01-page-faults.cu"><code>01-page-faults.cu</code></a> 包含 <code>hostFunction</code> 和 <code>gpuKernel</code> 函数，我们可以通过这两个函数并使用数字 <code>1</code> 初始化 <code>2&lt;&lt;24</code> 个单元向量的元素。主机函数和 GPU 核函数目前均未使用。</p><p>对于以下 4 个问题中的每一问题，请根据您对 UM 行为的理解，首先假设应会发生何种页错误，然后使用代码库中所提供 2 个函数中的其中一个或同时使用这两个函数编辑 <a href="http://dli-604a4aa51b37-46802e.aws.labs.courses.nvidia.com/lab/edit/06-unified-memory-page-faults/01-page-faults.cu"><code>01-page-faults.cu</code></a>以创建场景，以便您测试假设。</p><p>为了检验您的假设，请使用下面的代码执行单元来编译和分析代码。 一定要记录从<code>nsys profile --stats = true</code>输出中获得的假设以及结果。 在<code>nsys profile --stats = true</code>的输出中，您应该查找以下内容：</p><ul><li>输出中是否有 <em>CUDA 内存操作统计信息</em> 部分？</li><li>如果是，这是否表示数据从主机到设备（HtoD）或从设备到主机（DtoH）的迁移？</li><li>进行迁移时，输出如何说明有多少个“操作”？ 如果看到许多小的内存迁移操作，则表明按需出现页面错误，并且每次在请求的位置出现页面错误时都会发生小内存迁移。</li></ul><p>以下是供您探索的方案，以及遇到困难时的解决方案：</p><ul><li>当仅通过 CPU 访问统一内存时，是否存在内存迁移和/或页面错误的证据？</li><li>当仅通过 GPU 访问统一内存时，是否有证据表明内存迁移和/或页面错误？</li><li>当先由 CPU 然后由 GPU 访问统一内存时，是否有证据表明存在内存迁移和/或页面错误？</li><li>当先由 GPU 然后由 CPU 访问统一内存时，是否存在内存迁移和/或页面错误的证据？</li></ul><p><img src="https://cdn.jsdelivr.net/gh/forrest-wcb/markdown_img@main/img/202312292238197.png" alt="image-20231223181124188"></p><p>上图为<code>nsys profile --stats = true</code>输出内容中显示的数据从设备到主机的迁移 DtoH，总操作数为 768，可以看到有许多小内存的迁移操作，验证了按需出现页面错误，并且每次在请求的位置出现页面错误时都会发生小内存迁移。</p><p>当 <code>nsys profile</code> 给出核函数所需的执行时间时，则在此函数执行期间发生的主机到设备页错误和数据迁移都会包含在所显示的执行时间中。故可以通过减少 UM 页错误和数据迁移的发生缩短核函数运行时间。</p><h2 id="异步内存预取">异步内存预取</h2><p>在主机到设备和设备到主机的内存传输过程中，我们使用一种技术来减少页错误和按需内存迁移成本，此强大技术称为<strong>异步内存预取</strong>。通过此技术，程序员可以在应用程序代码使用统一内存 (UM) 之前，在后台将其异步迁移至系统中的任何 CPU 或 GPU 设备。此举可以减少页错误和按需数据迁移所带来的成本，并进而提高 GPU 核函数和 CPU 函数的性能。</p><p>此外，预取往往会以更大的数据块来迁移数据，因此其迁移次数要低于按需迁移。此技术非常适用于以下情况：在运行时之前已知数据访问需求且数据访问并未采用稀疏模式。</p><p>CUDA 可通过 <code>cudaMemPrefetchAsync</code> 函数，轻松将托管内存异步预取到 GPU 设备或 CPU。以下所示为如何使用该函数将数据预取到当前处于活动状态的 GPU 设备，然后再预取到 CPU：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> deviceId;<br><span class="hljs-built_in">cudaGetDevice</span>(&amp;deviceId);                                  <span class="hljs-comment">// The ID of the currently active GPU device.</span><br><br><span class="hljs-built_in">cudaMemPrefetchAsync</span>(pointerToSomeUMData, size, deviceId);<span class="hljs-comment">// 预取pointerToSomeUMData处size大小的数据至活动的GPU设备</span><br><span class="hljs-built_in">cudaMemPrefetchAsync</span>(pointerToSomeUMData, size, cudaCpuDeviceId); <span class="hljs-comment">// 预取回主机.`cudaCpuDeviceId`是可以直接使用的变量</span><br></code></pre></td></tr></table></figure><h3 id="练习：异步内存预取">练习：异步内存预取</h3><p>在 <a href="http://01-vector-add.cu">01-vector-add.cu</a> 应用程序中使用 <code>cudaMemPrefetchAsync</code> 函数开展 实验，以探究其会对页错误和内存迁移产生何种影响。</p><p>结果：可以看到内存传输次数减少了，但是每次传输的量增加了，并且内核执行时间大大减少了。</p><h1><strong>异步流及 CUDA C/C++ 应用程序的可视化性能分析</strong></h1><p>CUDA 工具包附带了 <strong>Nsight Systems</strong>，这是一个功能强大的 GUI 应用程序，可支持 CUDA 应用程序的开发。 Nsight Systems 为被加速的应用程序生成图形化的活动时间表，其中包含有关 CUDA API 调用、内核执行、内存活动以及<strong>CUDA 流</strong>的使用的详细信息。</p><h2 id="学习目标-2">学习目标</h2><p>在完成本练习后，您将能够：</p><ul><li>使用<strong>Nsight Systems</strong>直观地描述由 GPU 加速的 CUDA 应用程序的时间表。</li><li>使用<strong>Nsight Systems</strong>识别和利用 CUDA 应用程序中的优化机会。</li><li>利用 CUDA 流在被加速的应用程序中并发执行核函数。</li><li>（ <strong>可选的进阶内容</strong> ）使用手动的设备内存分配，包括分配固定的内存，以便在并发 CUDA 流之间异步传输数据。</li></ul><h2 id="运行-Nsight-Systems">运行 Nsight Systems</h2><p>此处使用的是英伟达配置好的远程桌面，可以直接启动和使用 Nsight Systems（但是无比的卡顿），建议在本地配置，进行可视化分析。</p><p>主要对前面的各种优化进行可视化分析，故不做记录</p><h2 id="并发-CUDA-流">并发 CUDA 流</h2><p>在 CUDA 编程中，<strong>流</strong>是由按顺序执行的一系列命令构成。在 CUDA 应用程序中，核函数的执行以及一些内存传输均在 CUDA 流中进行。不过直至此时，您仍未直接与 CUDA 流打交道；但实际上您的 CUDA 代码已在名为<em>默认流</em>的流中执行了其核函数。</p><p>除默认流以外，CUDA 程序员还可创建并使用非默认 CUDA 流，此举可支持执行多个操作，例如在不同的流中并发执行多个核函数。多流的使用可以为您的加速应用程序带来另外一个层次的并行，并能提供更多应用程序的优化机会。</p><p>以下为默认流和非默认流的关系</p><ul><li>给定流中的所有操作会按序执行。</li></ul><img src="https://cdn.jsdelivr.net/gh/forrest-wcb/markdown_img@main/img/202312291746109.png" alt="image-20231229174627015" style="zoom:50%;" /><ul><li>就不同非默认流中的操作而言，无法保证其会按彼此之间的任何特定顺序执行。</li></ul><img src="https://cdn.jsdelivr.net/gh/forrest-wcb/markdown_img@main/img/202312291747578.png" alt="image-20231229174728331" style="zoom:50%;" /><ul><li>默认流具有阻断能力，即，它会等待其它已在运行的所有流完成当前操作之后才运行，但在其自身运行完毕之前亦会阻碍其它流的运行</li></ul><img src="https://cdn.jsdelivr.net/gh/forrest-wcb/markdown_img@main/img/202312291748572.png" alt="image-20231229174809215" style="zoom:50%;" /><h3 id="创建，使用和销毁非默认-CUDA-流">创建，使用和销毁非默认 CUDA 流</h3><p>以下代码段演示了如何创建，利用和销毁非默认 CUDA 流。您会注意到，要在非默认 CUDA 流中启动 CUDA 核函数，必须将流作为执行配置的第 4 个可选参数传递给该核函数。到目前为止，您仅利用了执行配置的前两个参数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">cudaStream_t stream;   <span class="hljs-comment">// CUDA流的类型为 `cudaStream_t`</span><br><span class="hljs-built_in">cudaStreamCreate</span>(&amp;stream); <span class="hljs-comment">// 注意，必须将一个指针传递给 `cudaCreateStream`</span><br><br>someKernel&lt;&lt;&lt;number_of_blocks, threads_per_block, <span class="hljs-number">0</span>, stream&gt;&gt;&gt;();   <span class="hljs-comment">// `stream` 作为第4个EC参数传递</span><br><br><span class="hljs-built_in">cudaStreamDestroy</span>(stream); <span class="hljs-comment">// 注意，将值（而不是指针）传递给 `cudaDestroyStream`</span><br></code></pre></td></tr></table></figure><p>但值得一提的是，执行配置的第 3 个可选参数超出了本实验的范围。此参数允许程序员提供<strong>共享内存</strong>中为每个内核启动动态分配的字节数。每个块分配给共享内存的默认字节数为“0”，在本练习的其余部分中，您将传递“ 0”作为该值，以便展示我们感兴趣的第 4 个参数。</p><h3 id="练习-2">练习</h3><p>源程序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">printNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, number);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)<br>  &#123;<br>    printNumber&lt;&lt;&lt;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&gt;&gt;&gt;(i);<br>  &#125;<br>  <span class="hljs-built_in">cudaDeviceSynchronize</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以预见核函数的 5 次启动都在默认流顺次执行，可以用 Nsight Systems 进行可视化分析。由于核函数的所有 5 次启动均在同一个流中发生，因此看到 5 个核函数顺次执行也就不足为奇。此外，也可以这么说，由于默认流具有阻断作用，所以核函数都会在完成本次启动之后才启动下一次，而事实也是如此。</p><p>重构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">printNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, number);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)<br>  &#123;<br>    cudaStream_t stream;<br>    <span class="hljs-built_in">cudaStreamCreate</span>(&amp;stream);<br>    printNumber&lt;&lt;&lt;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, stream&gt;&gt;&gt;(i);<br>    <span class="hljs-built_in">cudaStreamDestroy</span>(stream);<br>  &#125;<br>  <span class="hljs-built_in">cudaDeviceSynchronize</span>();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>原程序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function">__global__</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initWith</span><span class="hljs-params">(<span class="hljs-type">float</span> num, <span class="hljs-type">float</span> *a, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br><br>  <span class="hljs-type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;<br>  <span class="hljs-type">int</span> stride = blockDim.x * gridDim.x;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = index; i &lt; N; i += stride)<br>  &#123;<br>    a[i] = num;<br>  &#125;<br>&#125;<br><br><span class="hljs-function">__global__</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addVectorsInto</span><span class="hljs-params">(<span class="hljs-type">float</span> *result, <span class="hljs-type">float</span> *a, <span class="hljs-type">float</span> *b, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;<br>  <span class="hljs-type">int</span> stride = blockDim.x * gridDim.x;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = index; i &lt; N; i += stride)<br>  &#123;<br>    result[i] = a[i] + b[i];<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">checkElementsAre</span><span class="hljs-params">(<span class="hljs-type">float</span> target, <span class="hljs-type">float</span> *vector, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span>(vector[i] != target)<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FAIL: vector[%d] - %0.0f does not equal %0.0f\n&quot;</span>, i, vector[i], target);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Success! All values calculated correctly.\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> deviceId;<br>  <span class="hljs-type">int</span> numberOfSMs;<br><br>  <span class="hljs-built_in">cudaGetDevice</span>(&amp;deviceId);<br>  <span class="hljs-built_in">cudaDeviceGetAttribute</span>(&amp;numberOfSMs, cudaDevAttrMultiProcessorCount, deviceId);<br><br>  <span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">24</span>;<br>  <span class="hljs-type">size_t</span> size = N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>);<br><br>  <span class="hljs-type">float</span> *a;<br>  <span class="hljs-type">float</span> *b;<br>  <span class="hljs-type">float</span> *c;<br><br>  <span class="hljs-built_in">cudaMallocManaged</span>(&amp;a, size);<br>  <span class="hljs-built_in">cudaMallocManaged</span>(&amp;b, size);<br>  <span class="hljs-built_in">cudaMallocManaged</span>(&amp;c, size);<br><br>  <span class="hljs-built_in">cudaMemPrefetchAsync</span>(a, size, deviceId);<br>  <span class="hljs-built_in">cudaMemPrefetchAsync</span>(b, size, deviceId);<br>  <span class="hljs-built_in">cudaMemPrefetchAsync</span>(c, size, deviceId);<br><br>  <span class="hljs-type">size_t</span> threadsPerBlock;<br>  <span class="hljs-type">size_t</span> numberOfBlocks;<br><br>  threadsPerBlock = <span class="hljs-number">256</span>;<br>  numberOfBlocks = <span class="hljs-number">32</span> * numberOfSMs;<br><br>  cudaError_t addVectorsErr;<br>  cudaError_t asyncErr;<br><br>  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(<span class="hljs-number">3</span>, a, N);<br>  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(<span class="hljs-number">4</span>, b, N);<br>  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(<span class="hljs-number">0</span>, c, N);<br><br>  addVectorsInto&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(c, a, b, N);<br><br>  addVectorsErr = <span class="hljs-built_in">cudaGetLastError</span>();<br>  <span class="hljs-keyword">if</span>(addVectorsErr != cudaSuccess) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, <span class="hljs-built_in">cudaGetErrorString</span>(addVectorsErr));<br><br>  asyncErr = <span class="hljs-built_in">cudaDeviceSynchronize</span>();<br>  <span class="hljs-keyword">if</span>(asyncErr != cudaSuccess) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, <span class="hljs-built_in">cudaGetErrorString</span>(asyncErr));<br><br>  <span class="hljs-built_in">cudaMemPrefetchAsync</span>(c, size, cudaCpuDeviceId);<br><br>  <span class="hljs-built_in">checkElementsAre</span>(<span class="hljs-number">7</span>, c, N);<br><br>  <span class="hljs-built_in">cudaFree</span>(a);<br>  <span class="hljs-built_in">cudaFree</span>(b);<br>  <span class="hljs-built_in">cudaFree</span>(c);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>重构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function">__global__</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initWith</span><span class="hljs-params">(<span class="hljs-type">float</span> num, <span class="hljs-type">float</span> *a, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br><br>  <span class="hljs-type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;<br>  <span class="hljs-type">int</span> stride = blockDim.x * gridDim.x;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = index; i &lt; N; i += stride)<br>  &#123;<br>    a[i] = num;<br>  &#125;<br>&#125;<br><br><span class="hljs-function">__global__</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addVectorsInto</span><span class="hljs-params">(<span class="hljs-type">float</span> *result, <span class="hljs-type">float</span> *a, <span class="hljs-type">float</span> *b, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;<br>  <span class="hljs-type">int</span> stride = blockDim.x * gridDim.x;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = index; i &lt; N; i += stride)<br>  &#123;<br>    result[i] = a[i] + b[i];<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">checkElementsAre</span><span class="hljs-params">(<span class="hljs-type">float</span> target, <span class="hljs-type">float</span> *vector, <span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span>(vector[i] != target)<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FAIL: vector[%d] - %0.0f does not equal %0.0f\n&quot;</span>, i, vector[i], target);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Success! All values calculated correctly.\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> deviceId;<br>  <span class="hljs-type">int</span> numberOfSMs;<br><br>  <span class="hljs-built_in">cudaGetDevice</span>(&amp;deviceId);<br>  <span class="hljs-built_in">cudaDeviceGetAttribute</span>(&amp;numberOfSMs, cudaDevAttrMultiProcessorCount, deviceId);<br><br>  <span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">24</span>;<br>  <span class="hljs-type">size_t</span> size = N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>);<br><br>  <span class="hljs-type">float</span> *a;<br>  <span class="hljs-type">float</span> *b;<br>  <span class="hljs-type">float</span> *c;<br><br>  <span class="hljs-built_in">cudaMallocManaged</span>(&amp;a, size);<br>  <span class="hljs-built_in">cudaMallocManaged</span>(&amp;b, size);<br>  <span class="hljs-built_in">cudaMallocManaged</span>(&amp;c, size);<br><br>  <span class="hljs-built_in">cudaMemPrefetchAsync</span>(a, size, deviceId);<br>  <span class="hljs-built_in">cudaMemPrefetchAsync</span>(b, size, deviceId);<br>  <span class="hljs-built_in">cudaMemPrefetchAsync</span>(c, size, deviceId);<br><br>  <span class="hljs-type">size_t</span> threadsPerBlock;<br>  <span class="hljs-type">size_t</span> numberOfBlocks;<br><br>  threadsPerBlock = <span class="hljs-number">256</span>;<br>  numberOfBlocks = <span class="hljs-number">32</span> * numberOfSMs;<br><br>  cudaError_t addVectorsErr;<br>  cudaError_t asyncErr;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Create 3 streams to run initialize the 3 data vectors in parallel.</span><br><span class="hljs-comment">   */</span><br><br>  cudaStream_t stream1, stream2, stream3;<br>  <span class="hljs-built_in">cudaStreamCreate</span>(&amp;stream1);<br>  <span class="hljs-built_in">cudaStreamCreate</span>(&amp;stream2);<br>  <span class="hljs-built_in">cudaStreamCreate</span>(&amp;stream3);<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Give each `initWith` launch its own non-standard stream.</span><br><span class="hljs-comment">   */</span><br><br>  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock, <span class="hljs-number">0</span>, stream1&gt;&gt;&gt;(<span class="hljs-number">3</span>, a, N);<br>  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock, <span class="hljs-number">0</span>, stream2&gt;&gt;&gt;(<span class="hljs-number">4</span>, b, N);<br>  initWith&lt;&lt;&lt;numberOfBlocks, threadsPerBlock, <span class="hljs-number">0</span>, stream3&gt;&gt;&gt;(<span class="hljs-number">0</span>, c, N);<br><br>  addVectorsInto&lt;&lt;&lt;numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(c, a, b, N);<br><br>  addVectorsErr = <span class="hljs-built_in">cudaGetLastError</span>();<br>  <span class="hljs-keyword">if</span>(addVectorsErr != cudaSuccess) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, <span class="hljs-built_in">cudaGetErrorString</span>(addVectorsErr));<br><br>  asyncErr = <span class="hljs-built_in">cudaDeviceSynchronize</span>();<br>  <span class="hljs-keyword">if</span>(asyncErr != cudaSuccess) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, <span class="hljs-built_in">cudaGetErrorString</span>(asyncErr));<br><br>  <span class="hljs-built_in">cudaMemPrefetchAsync</span>(c, size, cudaCpuDeviceId);<br><br>  <span class="hljs-built_in">checkElementsAre</span>(<span class="hljs-number">7</span>, c, N);<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Destroy streams when they are no longer needed.</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-built_in">cudaStreamDestroy</span>(stream1);<br>  <span class="hljs-built_in">cudaStreamDestroy</span>(stream2);<br>  <span class="hljs-built_in">cudaStreamDestroy</span>(stream3);<br><br>  <span class="hljs-built_in">cudaFree</span>(a);<br>  <span class="hljs-built_in">cudaFree</span>(b);<br>  <span class="hljs-built_in">cudaFree</span>(c);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="最终任务：加速和优化-N-体模拟器">最终任务：加速和优化 N 体模拟器</h2><p><a href="https://en.wikipedia.org/wiki/N-body_problem">n-body</a> 模拟器可以预测通过引力相互作用的一组物体的个体运动。<a href="http://dli-604a4aa51b37-c4c714.aws.labs.courses.nvidia.com/lab/edit/09-nbody/01-nbody.cu">01-nbody.cu</a> 包含一个简单而有效的 n-body 模拟器，适合用于在三维空间移动的物体。我们可通过向该应用程序传递一个命令行参数以影响系统中的物体数量。</p><p>以目前的仅用 CPU 的情况下，此应用程序大约需要 5 秒钟才能运行 4096 个物体，需要<strong>20 分钟</strong>才能运行 65536 个物体。您的任务是用 GPU 加速程序，同时保持仿真的正确性。</p><p>源程序如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;files.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOFTENING 1e-9f</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Each body contains x, y, and z coordinate positions,</span><br><span class="hljs-comment"> * as well as velocities in the x, y, and z directions.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123; <span class="hljs-type">float</span> x, y, z, vx, vy, vz; &#125; Body;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Calculate the gravitational impact of all bodies in the system</span><br><span class="hljs-comment"> * on all others.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bodyForce</span><span class="hljs-params">(Body *p, <span class="hljs-type">float</span> dt, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>    <span class="hljs-type">float</span> Fx = <span class="hljs-number">0.0f</span>; <span class="hljs-type">float</span> Fy = <span class="hljs-number">0.0f</span>; <span class="hljs-type">float</span> Fz = <span class="hljs-number">0.0f</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>      <span class="hljs-type">float</span> dx = p[j].x - p[i].x;<br>      <span class="hljs-type">float</span> dy = p[j].y - p[i].y;<br>      <span class="hljs-type">float</span> dz = p[j].z - p[i].z;<br>      <span class="hljs-type">float</span> distSqr = dx*dx + dy*dy + dz*dz + SOFTENING;<br>      <span class="hljs-type">float</span> invDist = <span class="hljs-built_in">rsqrtf</span>(distSqr);<br>      <span class="hljs-type">float</span> invDist3 = invDist * invDist * invDist;<br><br>      Fx += dx * invDist3; Fy += dy * invDist3; Fz += dz * invDist3;<br>    &#125;<br><br>    p[i].vx += dt*Fx; p[i].vy += dt*Fy; p[i].vz += dt*Fz;<br>  &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br><br>  <span class="hljs-comment">// The assessment will test against both 2&lt;11 and 2&lt;15.</span><br>  <span class="hljs-comment">// Feel free to pass the command line argument 15 when you gernate ./nbody report files</span><br>  <span class="hljs-type">int</span> nBodies = <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">11</span>;<br>  <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">1</span>) nBodies = <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]);<br><br>  <span class="hljs-comment">// The assessment will pass hidden initialized values to check for correctness.</span><br>  <span class="hljs-comment">// You should not make changes to these files, or else the assessment will not work.</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> * initialized_values;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> * solution_values;<br><br>  <span class="hljs-keyword">if</span> (nBodies == <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">11</span>) &#123;<br>    initialized_values = <span class="hljs-string">&quot;files/initialized_4096&quot;</span>;<br>    solution_values = <span class="hljs-string">&quot;files/solution_4096&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// nBodies == 2&lt;&lt;15</span><br>    initialized_values = <span class="hljs-string">&quot;files/initialized_65536&quot;</span>;<br>    solution_values = <span class="hljs-string">&quot;files/solution_65536&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">2</span>) initialized_values = argv[<span class="hljs-number">2</span>];<br>  <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">3</span>) solution_values = argv[<span class="hljs-number">3</span>];<br><br>  <span class="hljs-type">const</span> <span class="hljs-type">float</span> dt = <span class="hljs-number">0.01f</span>; <span class="hljs-comment">// Time step</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">int</span> nIters = <span class="hljs-number">10</span>;  <span class="hljs-comment">// Simulation iterations</span><br><br>  <span class="hljs-type">int</span> bytes = nBodies * <span class="hljs-built_in">sizeof</span>(Body);<br>  <span class="hljs-type">float</span> *buf;<br><br>  buf = (<span class="hljs-type">float</span> *)<span class="hljs-built_in">malloc</span>(bytes);<br><br>  Body *p = (Body*)buf;<br><br>  <span class="hljs-built_in">read_values_from_file</span>(initialized_values, buf, bytes);<br><br>  <span class="hljs-type">double</span> totalTime = <span class="hljs-number">0.0</span>;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * This simulation will run for 10 cycles of time, calculating gravitational</span><br><span class="hljs-comment">   * interaction amongst bodies, and adjusting their positions to reflect.</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> iter = <span class="hljs-number">0</span>; iter &lt; nIters; iter++) &#123;<br>    <span class="hljs-built_in">StartTimer</span>();<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * You will likely wish to refactor the work being done in `bodyForce`,</span><br><span class="hljs-comment">   * and potentially the work to integrate the positions.</span><br><span class="hljs-comment">   */</span><br><br>    <span class="hljs-built_in">bodyForce</span>(p, dt, nBodies); <span class="hljs-comment">// compute interbody forces</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * This position integration cannot occur until this round of `bodyForce` has completed.</span><br><span class="hljs-comment">   * Also, the next round of `bodyForce` cannot begin until the integration is complete.</span><br><span class="hljs-comment">   */</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; nBodies; i++) &#123; <span class="hljs-comment">// integrate position</span><br>      p[i].x += p[i].vx*dt;<br>      p[i].y += p[i].vy*dt;<br>      p[i].z += p[i].vz*dt;<br>    &#125;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">double</span> tElapsed = <span class="hljs-built_in">GetTimer</span>() / <span class="hljs-number">1000.0</span>;<br>    totalTime += tElapsed;<br>  &#125;<br><br>  <span class="hljs-type">double</span> avgTime = totalTime / (<span class="hljs-type">double</span>)(nIters);<br>  <span class="hljs-type">float</span> billionsOfOpsPerSecond = <span class="hljs-number">1e-9</span> * nBodies * nBodies / avgTime;<br>  <span class="hljs-built_in">write_values_to_file</span>(solution_values, buf, bytes);<br><br>  <span class="hljs-comment">// You will likely enjoy watching this value grow as you accelerate the application,</span><br>  <span class="hljs-comment">// but beware that a failure to correctly synchronize the device might result in</span><br>  <span class="hljs-comment">// unrealistically high values.</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%0.3f Billion Interactions / second&quot;</span>, billionsOfOpsPerSecond);<br><br>  <span class="hljs-built_in">free</span>(buf);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>优化热点如下：</p><ol><li>将 bodyforce 函数改为核函数，外层循环可以优化，内层循环具有顺序依赖故不做改动</li><li>将 bodyforce 函数执行后的将引力集成到各物体位置的 for 循环改为核函数。“该集成不仅需在 <code>bodyForce</code> 函数运行后进行，并且需在下一次调用 <code>bodyForce</code> 函数之前完成。”所以，在执行前添加 cudaDeviceSynchronize()语句</li><li>执行配置根据 SMs 和 wraps 数量进行配置（此处线程数越大，核函数运行时间反而变长，取 32 和 64 的运行时间相对较优）</li></ol><p>重构结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;timer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;files.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOFTENING 1e-9f</span><br><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123; <span class="hljs-type">float</span> x, y, z, vx, vy, vz; &#125; Body;<br><br><br><br><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">bodyForce</span><span class="hljs-params">(Body *p, <span class="hljs-type">float</span> dt, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;<br>  <span class="hljs-type">int</span> stride = blockDim.x * gridDim.x;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; n; i += stride)&#123;<br>    <span class="hljs-type">float</span> Fx = <span class="hljs-number">0.0f</span>; <span class="hljs-type">float</span> Fy = <span class="hljs-number">0.0f</span>; <span class="hljs-type">float</span> Fz = <span class="hljs-number">0.0f</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>      <span class="hljs-type">float</span> dx = p[j].x - p[i].x;<br>      <span class="hljs-type">float</span> dy = p[j].y - p[i].y;<br>      <span class="hljs-type">float</span> dz = p[j].z - p[i].z;<br>      <span class="hljs-type">float</span> distSqr = dx*dx + dy*dy + dz*dz + SOFTENING;<br>      <span class="hljs-type">float</span> invDist = <span class="hljs-built_in">rsqrtf</span>(distSqr);<br>      <span class="hljs-type">float</span> invDist3 = invDist * invDist * invDist;<br><br>      Fx += dx * invDist3; Fy += dy * invDist3; Fz += dz * invDist3;<br>    &#125;<br><br>    p[i].vx += dt*Fx; p[i].vy += dt*Fy; p[i].vz += dt*Fz;<br>  &#125;<br>&#125;<br><br><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">integrate_position</span><span class="hljs-params">(Body *p,<span class="hljs-type">float</span> dt,<span class="hljs-type">int</span> n)</span></span>&#123;<br>        <span class="hljs-type">int</span> index = threadIdx.x + blockIdx.x * blockDim.x;<br>       <span class="hljs-type">int</span> stride = blockDim.x * gridDim.x;<br><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; n; i += stride) &#123;<br>                <span class="hljs-comment">// integrate position</span><br>                p[i].x += p[i].vx*dt;<br>                p[i].y += p[i].vy*dt;<br>                p[i].z += p[i].vz*dt;<br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>  <span class="hljs-type">int</span> deviceId;<br>  <span class="hljs-type">int</span> numberOfSMs;<br><br>  <span class="hljs-built_in">cudaGetDevice</span>(&amp;deviceId);<br>  <span class="hljs-built_in">cudaDeviceGetAttribute</span>(&amp;numberOfSMs, cudaDevAttrMultiProcessorCount, deviceId);<br><br><br>  <span class="hljs-type">int</span> nBodies = <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">11</span>;<br>  <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">1</span>) nBodies = <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]);<br><br><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> * initialized_values;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> * solution_values;<br><br>  <span class="hljs-keyword">if</span> (nBodies == <span class="hljs-number">2</span>&lt;&lt;<span class="hljs-number">11</span>) &#123;<br>    initialized_values = <span class="hljs-string">&quot;files/initialized_4096&quot;</span>;<br>    solution_values = <span class="hljs-string">&quot;files/solution_4096&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// nBodies == 2&lt;&lt;15</span><br>    initialized_values = <span class="hljs-string">&quot;files/initialized_65536&quot;</span>;<br>    solution_values = <span class="hljs-string">&quot;files/solution_65536&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">2</span>) initialized_values = argv[<span class="hljs-number">2</span>];<br>  <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">3</span>) solution_values = argv[<span class="hljs-number">3</span>];<br><br>  <span class="hljs-type">const</span> <span class="hljs-type">float</span> dt = <span class="hljs-number">0.01f</span>; <span class="hljs-comment">// Time step</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">int</span> nIters = <span class="hljs-number">10</span>;  <span class="hljs-comment">// Simulation iterations</span><br><br>  <span class="hljs-type">int</span> bytes = nBodies * <span class="hljs-built_in">sizeof</span>(Body);<br>  <span class="hljs-type">float</span> *buf;<br><br>  <span class="hljs-comment">//buf = (float *)malloc(bytes);</span><br>  <span class="hljs-built_in">cudaMallocManaged</span>(&amp;buf, bytes);<br><br>  Body *p = (Body*)buf;<br>  <span class="hljs-comment">//cudaMemPrefetchAsync(p, bytes, deviceId);</span><br>  <span class="hljs-type">size_t</span> threadsPerBlock = <span class="hljs-number">64</span>;<br>  <span class="hljs-type">size_t</span> numberOfBlocks = <span class="hljs-number">32</span> * numberOfSMs;<br><br>  <span class="hljs-built_in">read_values_from_file</span>(initialized_values, buf, bytes);<br><br>  <span class="hljs-type">double</span> totalTime = <span class="hljs-number">0.0</span>;<br><br><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> iter = <span class="hljs-number">0</span>; iter &lt; nIters; iter++) &#123;<br>    <span class="hljs-built_in">StartTimer</span>();<br>    <span class="hljs-comment">//cudaStream_t stream;   // CUDA流的类型为 `cudaStream_t`</span><br>    <span class="hljs-comment">//cudaStreamCreate(&amp;stream);</span><br><br><br>    bodyForce&lt;&lt;&lt; numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(p, dt, nBodies); <span class="hljs-comment">// compute interbody forces</span><br><br>    <span class="hljs-built_in">cudaDeviceSynchronize</span>();<br>    integrate_position&lt;&lt;&lt; numberOfBlocks, threadsPerBlock&gt;&gt;&gt;(p, dt, nBodies);<br>    <span class="hljs-comment">//cudaDeviceSynchronize();</span><br>    <span class="hljs-comment">//cudaStreamDestroy(stream);</span><br><br>    <span class="hljs-type">const</span> <span class="hljs-type">double</span> tElapsed = <span class="hljs-built_in">GetTimer</span>() / <span class="hljs-number">1000.0</span>;<br>    totalTime += tElapsed;<br>  &#125;<br>  <span class="hljs-comment">//cudaDeviceSynchronize();</span><br>  <span class="hljs-type">double</span> avgTime = totalTime / (<span class="hljs-type">double</span>)(nIters);<br>  <span class="hljs-type">float</span> billionsOfOpsPerSecond = <span class="hljs-number">1e-9</span> * nBodies * nBodies / avgTime;<br>  <span class="hljs-built_in">write_values_to_file</span>(solution_values, buf, bytes);<br><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%0.3f Billion Interactions / second&quot;</span>, billionsOfOpsPerSecond);<br><br>  <span class="hljs-built_in">cudaFree</span>(buf);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后优化结果，计算 4096 个物体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">您的应用程序运行了: 0.1543秒<br>您的应用程序运行速度是  22.358 Billion Interactions / second<br></code></pre></td></tr></table></figure><p>计算 65536 个物体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">您的应用程序运行了: 0.4912秒<br>您的应用程序运行速度是  121.163 Billion Interactions / second<br></code></pre></td></tr></table></figure><p>建议结合可视化分析，也许可以得到更优的结果。（本人由于懒得部署本地 Nsight Systems，且英伟达提供的远程桌面过于卡顿，故没有结合可视化分析。虽然尝试了异步内存预取和使用非默认流，但是效果并不显著，因为没法进行可视化分析，我也不清楚内存转移时间是否缩短和不同非默认流是否并行，所以使用可视化分析，可能可以进行进一步的优化）</p><h2 id="小结">小结</h2><p>姑且算是接触了 cuda c 编程的皮毛。缘由是上学期心头一热选的公选课，但由于要跨校区上课，所以也没去过几节课（别问，就是懒）。没退课的原因主要是想在 cuda 上加半个技能点，而且这是学校帮忙兑换的 Nvidia 线上自主培训课程，价值 89 刀，薅一手。</p><p>平时没学，为了完成大作业，就在这几周速通了，学习记录在这篇 blog。此外由于课上运行都是在英伟达提供的远程云环境中，没有考虑到配置 cuda 环境的诸多麻烦。上周速成大作业的时候，跌跌撞撞地配了快一天的环境 😅，如果后面有想法，打算再写篇博客记录下环境配置。</p><hr><p>——2023 年倒数第三天的晚上。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cuda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Season 1 Episode 1-小站诞生</title>
      <link href="/2023/09/04/hello%20world/"/>
      <url>/2023/09/04/hello%20world/</url>
      
        <content type="html"><![CDATA[<h1>建站起因</h1><p>博主已经是大三老东西了，前两年由于兴趣广泛，总是突发奇想打算学习某方面知识然后又浅尝辄止，杂乱无序的学习路线导致如今复盘发现竟无一项所长。之前见过同学的博客，我也心血来潮跟着教程折腾了几天，搭建了个自己的博客（hexo+butterfly），希望以此记录我的学习轨迹，兼作督促。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Season 1 Episode 2-小站退役(暂时)</title>
      <link href="/2023/03/08/see%20you%20again/"/>
      <url>/2023/03/08/see%20you%20again/</url>
      
        <content type="html"><![CDATA[<h1>退役原因</h1><p>鉴于之前走了不少错路，保研这条路博主已经心灰意冷了。综合了风险和期望，博主决定另起炉灶，走上考研的道路。</p><p>博客先就这样了(虽然还有不少问题没有解决和好多功能没有实现)，其实博主对美观方面是比较在意的，姑且先立个 flag，以后有时间的话一定回来继续优化。</p><p>博客也没时间更新了，等考完研吧 😭</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
